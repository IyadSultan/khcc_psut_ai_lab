# Combined Python and HTML files
# Generated from directory: C:\Users\isult\OneDrive\Documents\khcc_psut_ai_lab\khcc_psut_ai_lab
# Total files found: 54



# Contents from: .\templates\base.html
{% load static %}
{% load django_bootstrap5 %}
{% load crispy_forms_tags %}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}KHCC_PSUT AI Lab{% endblock %}</title>
    
    <!-- Bootstrap CSS -->
    {% bootstrap_css %}
    
    <!-- Bootstrap Icons -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.2/font/bootstrap-icons.css">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{% static 'css/style.css' %}">
    {{ block.super }}
    {% block extra_css %}{% endblock %}
</head>
<body>
    {% include 'includes/navbar.html' %}
    
    <main class="py-4">
        {% bootstrap_messages %}
        
        {% block content %}
        {% endblock %}
    </main>
    
    <footer class="bg-light mt-5 py-4">
        <div class="container">
            <div class="text-center text-muted">
                <p>&copy; 2024 KHCC_PSUT AI Lab. All rights reserved.</p>
            </div>
        </div>
    </footer>
    
    <!-- Bootstrap JavaScript -->
    {% bootstrap_javascript %}
    
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    
    <!-- Custom JavaScript -->
    <script src="{% static 'js/main.js' %}"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>

# Contents from: .\templates\includes\navbar.html
<!-- templates/includes/navbar.html -->
<nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom">
    <div class="container">
        <a class="navbar-brand" href="{% url 'projects:project_list' %}">
            KHCC_PSUT AI Lab
        </a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" 
                data-bs-target="#navbarNav" aria-controls="navbarNav" 
                aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link {% if request.resolver_match.url_name == 'project_list' and request.resolver_match.namespace == 'projects' %}active{% endif %}" 
                       href="{% url 'projects:project_list' %}">Projects</a>
                </li>
                {% if user.is_authenticated %}
                <li class="nav-item">
                    <a class="nav-link {% if request.resolver_match.url_name == 'submit_project' and request.resolver_match.namespace == 'projects' %}active{% endif %}" 
                       href="{% url 'projects:submit_project' %}">Share Project</a>
                </li>
                {% endif %}
            </ul>
            <ul class="navbar-nav">
                {% if user.is_authenticated %}
                <li class="nav-item">
                    <a class="nav-link {% if request.resolver_match.url_name == 'notifications' and request.resolver_match.namespace == 'projects' %}active{% endif %}" 
                       href="{% url 'projects:notifications' %}">
                        <i class="bi bi-bell"></i>
                        {% with unread_count=user.notifications.unread.count %}
                        {% if unread_count > 0 %}
                        <span class="badge bg-danger">{{ unread_count }}</span>
                        {% endif %}
                        {% endwith %}
                    </a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button"
                       data-bs-toggle="dropdown" aria-expanded="false">
                        {{ user.username }}
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                        <li>
                            <a class="dropdown-item" href="{% url 'projects:user_profile' user.username %}">
                                <i class="bi bi-person"></i> Profile
                            </a>
                        </li>
                        <li>
                            <a class="dropdown-item" href="{% url 'projects:edit_profile' %}">
                                <i class="bi bi-gear"></i> Settings
                            </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <a class="dropdown-item" href="{% url 'account_logout' %}">
                                <i class="bi bi-box-arrow-right"></i> Logout
                            </a>
                        </li>
                    </ul>
                </li>
                {% else %}
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'account_login' %}">Sign In</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="{% url 'account_signup' %}">Sign Up</a>
                </li>
                {% endif %}
            </ul>
        </div>
    </div>
</nav>

# Contents from: .\templates\includes\pagination.html
<!-- templates/projects/includes/pagination.html -->
{% if page_obj.has_other_pages %}
<nav aria-label="Project pagination" class="my-4">
    <ul class="pagination justify-content-center">
        {% if page_obj.has_previous %}
        <li class="page-item">
            <a class="page-link" href="?page=1" aria-label="First">
                <span aria-hidden="true">&laquo;&laquo;</span>
            </a>
        </li>
        <li class="page-item">
            <a class="page-link" 
               href="?page={{ page_obj.previous_page_number }}" 
               aria-label="Previous">
                <span aria-hidden="true">&laquo;</span>
            </a>
        </li>
        {% endif %}

        {% for num in page_obj.paginator.page_range %}
            {% if page_obj.number == num %}
                <li class="page-item active">
                    <span class="page-link">{{ num }}</span>
                </li>
            {% elif num > page_obj.number|add:'-3' and num < page_obj.number|add:'3' %}
                <li class="page-item">
                    <a class="page-link" href="?page={{ num }}">{{ num }}</a>
                </li>
            {% endif %}
        {% endfor %}

        {% if page_obj.has_next %}
        <li class="page-item">
            <a class="page-link" 
               href="?page={{ page_obj.next_page_number }}" 
               aria-label="Next">
                <span aria-hidden="true">&raquo;</span>
            </a>
        </li>
        <li class="page-item">
            <a class="page-link" 
               href="?page={{ page_obj.paginator.num_pages }}" 
               aria-label="Last">
                <span aria-hidden="true">&raquo;&raquo;</span>
            </a>
        </li>
        {% endif %}
    </ul>
</nav>
{% endif %}

# Contents from: .\templates\projects\about.html
{% extends 'base.html' %}
{% load static %}

{% block title %}About - KHCC_PSUT AI Lab{% endblock %}

{% block content %}
<!-- Hero Section -->
<section class="hero bg-primary text-white py-5 mb-5">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-8 mx-auto text-center">
                <h1 class="display-4 fw-bold mb-4">About KHCC_PSUT AI Lab</h1>
                <p class="lead mb-0">
                    A collaborative initiative between King Hussein Cancer Center and 
                    Princess Sumaya University for Technology to advance AI in healthcare.
                </p>
            </div>
        </div>
    </div>
</section>

<!-- Mission Section -->
<section class="mission mb-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8 text-center">
                <h2 class="h3 mb-4">Our Mission</h2>
                <p class="lead mb-5">
                    To foster innovation and collaboration in artificial intelligence 
                    applications for healthcare, particularly in cancer research and treatment.
                </p>
            </div>
        </div>
        
        <div class="row g-4">
            <div class="col-md-4">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <i class="bi bi-lightbulb display-4 text-primary mb-3"></i>
                        <h3 class="h5 mb-3">Innovation</h3>
                        <p class="text-muted mb-0">
                            Developing cutting-edge AI solutions to improve cancer diagnosis, 
                            treatment, and patient care.
                        </p>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <i class="bi bi-people display-4 text-primary mb-3"></i>
                        <h3 class="h5 mb-3">Collaboration</h3>
                        <p class="text-muted mb-0">
                            Bringing together medical professionals, researchers, and 
                            technology experts to solve complex healthcare challenges.
                        </p>
                    </div>
                </div>
            </div>
            
            <div class="col-md-4">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <i class="bi bi-mortarboard display-4 text-primary mb-3"></i>
                        <h3 class="h5 mb-3">Education</h3>
                        <p class="text-muted mb-0">
                            Training the next generation of AI specialists in healthcare 
                            through hands-on projects and research opportunities.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Partners Section -->
<section class="partners bg-light py-5 mb-5">
    <div class="container">
        <h2 class="h3 text-center mb-5">Our Partner Institutions</h2>
        
        <div class="row justify-content-center">
            <div class="col-lg-6 mb-4 mb-lg-0">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="text-center mb-4">
                            <img src="{% static 'images/khcc-logo.png' %}" 
                                 alt="King Hussein Cancer Center" 
                                 class="img-fluid" 
                                 style="max-height: 100px;">
                        </div>
                        <h3 class="h5 text-center mb-3">King Hussein Cancer Center</h3>
                        <p class="text-muted">
                            A leading comprehensive cancer care center in the Middle East, 
                            providing state-of-the-art medical services and conducting 
                            groundbreaking research in cancer treatment.
                        </p>
                        <div class="text-center">
                            <a href="https://khcc.jo" 
                               target="_blank" 
                               class="btn btn-outline-primary">
                                Visit Website
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            
            <div class="col-lg-6">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body">
                        <div class="text-center mb-4">
                            <img src="{% static 'images/psut-logo.png' %}" 
                            alt="Princess Sumaya University for Technology" 
                            class="img-fluid" 
                            style="max-height: 100px;">
                   </div>
                   <h3 class="h5 text-center mb-3">Princess Sumaya University for Technology</h3>
                   <p class="text-muted">
                       A leading technical university in Jordan, specializing in IT, 
                       engineering, and artificial intelligence education and research.
                   </p>
                   <div class="text-center">
                       <a href="https://www.psut.edu.jo" 
                          target="_blank" 
                          class="btn btn-outline-primary">
                           Visit Website
                       </a>
                   </div>
               </div>
           </div>
       </div>
   </div>
</div>
</section>

<!-- Research Areas Section -->
<section class="research-areas mb-5">
<div class="container">
   <h2 class="h3 text-center mb-5">Our Research Areas</h2>
   
   <div class="row g-4">
       <div class="col-md-6 col-lg-4">
           <div class="card border-0 shadow-sm h-100">
               <div class="card-body">
                   <div class="d-flex align-items-center mb-3">
                       <i class="bi bi-camera text-primary fs-4 me-2"></i>
                       <h4 class="h5 mb-0">Medical Imaging AI</h4>
                   </div>
                   <p class="text-muted mb-0">
                       Developing advanced algorithms for cancer detection and diagnosis 
                       using medical imaging.
                   </p>
               </div>
           </div>
       </div>
       
       <div class="col-md-6 col-lg-4">
           <div class="card border-0 shadow-sm h-100">
               <div class="card-body">
                   <div class="d-flex align-items-center mb-3">
                       <i class="bi bi-graph-up text-primary fs-4 me-2"></i>
                       <h4 class="h5 mb-0">Predictive Analytics</h4>
                   </div>
                   <p class="text-muted mb-0">
                       Using machine learning for treatment outcome prediction and 
                       personalized medicine.
                   </p>
               </div>
           </div>
       </div>
       
       <div class="col-md-6 col-lg-4">
           <div class="card border-0 shadow-sm h-100">
               <div class="card-body">
                   <div class="d-flex align-items-center mb-3">
                       <i class="bi bi-clipboard-data text-primary fs-4 me-2"></i>
                       <h4 class="h5 mb-0">Clinical Data Analysis</h4>
                   </div>
                   <p class="text-muted mb-0">
                       Mining and analyzing clinical data to identify patterns and 
                       improve patient care.
                   </p>
               </div>
           </div>
       </div>
       
       <div class="col-md-6 col-lg-4">
           <div class="card border-0 shadow-sm h-100">
               <div class="card-body">
                   <div class="d-flex align-items-center mb-3">
                       <i class="bi bi-robot text-primary fs-4 me-2"></i>
                       <h4 class="h5 mb-0">Natural Language Processing</h4>
                   </div>
                   <p class="text-muted mb-0">
                       Processing medical records and research papers to extract 
                       valuable insights.
                   </p>
               </div>
           </div>
       </div>
       
       <div class="col-md-6 col-lg-4">
           <div class="card border-0 shadow-sm h-100">
               <div class="card-body">
                   <div class="d-flex align-items-center mb-3">
                       <i class="bi bi-heart-pulse text-primary fs-4 me-2"></i>
                       <h4 class="h5 mb-0">Patient Monitoring</h4>
                   </div>
                   <p class="text-muted mb-0">
                       Real-time monitoring systems using AI for improved patient care 
                       and early intervention.
                   </p>
               </div>
           </div>
       </div>
       
       <div class="col-md-6 col-lg-4">
           <div class="card border-0 shadow-sm h-100">
               <div class="card-body">
                   <div class="d-flex align-items-center mb-3">
                       <i class="bi bi-shield-check text-primary fs-4 me-2"></i>
                       <h4 class="h5 mb-0">Drug Discovery</h4>
                   </div>
                   <p class="text-muted mb-0">
                       Accelerating drug discovery and development using artificial 
                       intelligence algorithms.
                   </p>
               </div>
           </div>
       </div>
   </div>
</div>
</section>

<!-- Team Section -->
<section class="team bg-light py-5 mb-5">
<div class="container">
   <h2 class="h3 text-center mb-5">Leadership Team</h2>
   
   <div class="row g-4">
       <div class="col-md-6 col-lg-3">
           <div class="card border-0 shadow-sm text-center h-100">
               <div class="card-body">
                   <img src="{% static 'images/team/director.jpg' %}" 
                        alt="Lab Director" 
                        class="rounded-circle mb-3" 
                        style="width: 150px; height: 150px; object-fit: cover;">
                   <h4 class="h5 mb-1">Dr. John Doe</h4>
                   <p class="text-muted small mb-3">Lab Director</p>
                   <p class="text-muted small mb-3">
                       20+ years experience in medical AI research and implementation.
                   </p>
                   <div class="d-flex justify-content-center gap-2">
                       <a href="#" class="text-dark"><i class="bi bi-linkedin"></i></a>
                       <a href="#" class="text-dark"><i class="bi bi-twitter"></i></a>
                       <a href="#" class="text-dark"><i class="bi bi-envelope"></i></a>
                   </div>
               </div>
           </div>
       </div>
       
       <!-- Add more team members here -->
   </div>
</div>
</section>

<!-- Join Us Section -->
<section class="join-us mb-5">
<div class="container">
   <div class="card border-0 bg-primary text-white shadow">
       <div class="card-body text-center py-5">
           <h2 class="h3 mb-4">Join Our Research Team</h2>
           <p class="lead mb-4">
               We're always looking for talented researchers and students to join our team. 
               If you're passionate about AI in healthcare, we'd love to hear from you.
           </p>
           <a href="{% url 'contact' %}" class="btn btn-light btn-lg">
               Contact Us
           </a>
       </div>
   </div>
</div>
</section>
{% endblock %}

# Contents from: .\templates\projects\edit_profile.html
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block content %}
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card border-0 shadow-sm">
                <div class="card-body">
                    <h4 class="card-title mb-4">Edit Profile</h4>
                    
                    <form method="post" enctype="multipart/form-data">
                        {% csrf_token %}
                        
                        <div class="mb-4">
                            <div class="d-flex justify-content-center">
                                {% if profile.avatar %}
                                    <img src="{{ profile.avatar.url }}" 
                                         alt="Current avatar" 
                                         class="rounded-circle mb-3" 
                                         style="width: 150px; height: 150px; object-fit: cover;">
                                {% else %}
                                    <img src="https://ui-avatars.com/api/?name={{ user.username }}&size=150" 
                                         alt="Default avatar" 
                                         class="rounded-circle mb-3">
                                {% endif %}
                            </div>
                            <div class="mb-3">
                                {{ form.avatar|as_crispy_field }}
                            </div>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-12 mb-3">
                                {{ form.bio|as_crispy_field }}
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                {{ form.location|as_crispy_field }}
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                {{ form.github_username|as_crispy_field }}
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                {{ form.website|as_crispy_field }}
                            </div>
                            
                            <div class="col-md-6 mb-3">
                                {{ form.linkedin_url|as_crispy_field }}
                            </div>
                        </div>
                        
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">
                                Save Changes
                            </button>
                            <a href="{% url 'user_profile' username=user.username %}" 
                               class="btn btn-outline-secondary">
                                Cancel
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

# Contents from: .\templates\projects\email.html
<!-- templates/emails/base_email.html -->
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ subject }}</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            margin: 0;
            padding: 0;
        }
        .container {
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }
        .header {
            background-color: #007bff;
            color: white;
            padding: 20px;
            text-align: center;
        }
        .content {
            padding: 20px;
            background-color: #ffffff;
        }
        .footer {
            text-align: center;
            padding: 20px;
            background-color: #f8f9fa;
            color: #666;
            font-size: 12px;
        }
        .btn {
            display: inline-block;
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            text-decoration: none;
            border-radius: 5px;
            margin: 10px 0;
        }
        .social-links {
            margin-top: 20px;
        }
        .social-links a {
            color: #666;
            text-decoration: none;
            margin: 0 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>KHCC_PSUT AI Lab</h1>
        </div>
        <div class="content">
            {% block content %}{% endblock %}
        </div>
        <div class="footer">
            <p>
                You received this email because you're part of the KHCC_PSUT AI Lab community.
                If you don't want to receive these emails, you can 
                <a href="{{ unsubscribe_url }}">unsubscribe</a>.
            </p>
            <div class="social-links">
                <a href="#">LinkedIn</a> |
                <a href="#">Twitter</a> |
                <a href="#">GitHub</a>
            </div>
            <p>&copy; {% now "Y" %} KHCC_PSUT AI Lab. All rights reserved.</p>
        </div>
    </div>
</body>
</html>

<!-- templates/emails/notification.html -->
{% extends 'emails/base_email.html' %}

{% block content %}
<h2>New Notification</h2>
<p>Hello {{ notification.recipient.get_full_name|default:notification.recipient.username }},</p>

<p>{{ notification.message }}</p>

{% if notification.project %}
<p>
    <a href="{{ site_url }}{% url 'project_detail' notification.project.pk %}" class="btn">
        View Project
    </a>
</p>
{% endif %}

<p>Best regards,<br>KHCC_PSUT AI Lab Team</p>
{% endblock %}

<!-- templates/emails/welcome.html -->
{% extends 'emails/base_email.html' %}

{% block content %}
<h2>Welcome to KHCC_PSUT AI Lab!</h2>
<p>Hello {{ user.get_full_name|default:user.username }},</p>

<p>
    Welcome to the KHCC_PSUT AI Lab community! We're excited to have you join us in our 
    mission to advance AI applications in healthcare.
</p>

<h3>Getting Started</h3>
<ul>
    <li>Complete your profile</li>
    <li>Explore ongoing projects</li>
    <li>Connect with other researchers</li>
    <li>Share your own projects</li>
</ul>

<p>
    <a href="{{ site_url }}{% url 'edit_profile' %}" class="btn">
        Complete Your Profile
    </a>
</p>

<p>Best regards,<br>KHCC_PSUT AI Lab Team</p>
{% endblock %}

<!-- templates/emails/project_comment.html -->
{% extends 'emails/base_email.html' %}

{% block content %}
<h2>New Comment on Your Project</h2>
<p>Hello {{ project.author.get_full_name|default:project.author.username }},</p>

<p>{{ comment.user.get_full_name|default:comment.user.username }} commented on your project "{{ project.title }}":</p>

<blockquote style="border-left: 3px solid #007bff; padding-left: 10px; margin: 10px 0;">
    {{ comment.content }}
</blockquote>

<p>
    <a href="{{ site_url }}{% url 'project_detail' project.pk %}" class="btn">
        View Comment
    </a>
</p>

<p>Best regards,<br>KHCC_PSUT AI Lab Team</p>
{% endblock %}

<!-- templates/emails/project_clap.html -->
{% extends 'emails/base_email.html' %}

{% block content %}
<h2>Someone Appreciated Your Project</h2>
<p>Hello {{ project.author.get_full_name|default:project.author.username }},</p>

<p>{{ clap.user.get_full_name|default:clap.user.username }} clapped for your project "{{ project.title }}"!</p>

<p>Your project now has {{ project.claps }} claps in total.</p>

<p>
    <a href="{{ site_url }}{% url 'project_detail' project.pk %}" class="btn">
        View Project
    </a>
</p>

<p>Best regards,<br>KHCC_PSUT AI Lab Team</p>
{% endblock %}

<!-- templates/emails/password_reset.html -->
{% extends 'emails/base_email.html' %}

{% block content %}
<h2>Password Reset Request</h2>
<p>Hello {{ user.get_full_name|default:user.username }},</p>

<p>
    We received a request to reset your password. If you didn't make this request, 
    you can safely ignore this email.
</p>

<p>
    To reset your password, click the button below:
</p>

<p>
    <a href="{{ password_reset_url }}" class="btn">
        Reset Password
    </a>
</p>

<p>
    If the button doesn't work, copy and paste this link into your browser:
    <br>
    {{ password_reset_url }}
</p>

<p>
    This link will expire in 24 hours for security reasons.
</p>

<p>Best regards,<br>KHCC_PSUT AI Lab Team</p>
{% endblock %}

<!-- templates/emails/email_verification.html -->
{% extends 'emails/base_email.html' %}

{% block content %}
<h2>Verify Your Email Address</h2>
<p>Hello {{ user.get_full_name|default:user.username }},</p>

<p>
    Thank you for registering with KHCC_PSUT AI Lab. Please verify your email address 
    by clicking the button below:
</p>

<p>
    <a href="{{ verification_url }}" class="btn">
        Verify Email Address
    </a>
</p>

<p>
    If the button doesn't work, copy and paste this link into your browser:
    <br>
    {{ verification_url }}
</p>

<p>
    This link will expire in 24 hours for security reasons.
</p>

<p>Best regards,<br>KHCC_PSUT AI Lab Team</p>
{% endblock %}

# Contents from: .\templates\projects\faculty_page.html
{% extends 'base.html' %}
{% load static %}

{% block title %}Faculty - KHCC_PSUT AI Lab{% endblock %}

{% block content %}
<!-- Hero Section -->
<section class="hero bg-primary text-white py-5 mb-5">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-8 mx-auto text-center">
                <h1 class="display-4 fw-bold mb-4">Our Faculty</h1>
                <p class="lead mb-0">
                    Meet our distinguished team of researchers, clinicians, and educators 
                    leading the advancement of AI in healthcare.
                </p>
            </div>
        </div>
    </div>
</section>

<!-- Leadership Section -->
<section class="leadership mb-5">
    <div class="container">
        <h2 class="h3 text-center mb-5">Leadership Team</h2>
        
        <div class="row g-4">
            <!-- Lab Director -->
            <div class="col-md-6 col-lg-4">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <img src="{% static 'images/faculty/director.jpg' %}" 
                             alt="Lab Director" 
                             class="rounded-circle mb-4" 
                             style="width: 200px; height: 200px; object-fit: cover;">
                        <h3 class="h4 mb-2">Prof. Ahmad Abdullah</h3>
                        <p class="text-primary mb-3">Lab Director</p>
                        <p class="text-muted mb-4">
                            Ph.D. in Artificial Intelligence<br>
                            20+ years experience in medical AI
                        </p>
                        <div class="d-flex justify-content-center gap-3 mb-4">
                            <a href="#" class="text-dark fs-5">
                                <i class="bi bi-linkedin"></i>
                            </a>
                            <a href="#" class="text-dark fs-5">
                                <i class="bi bi-google"></i>
                            </a>
                            <a href="#" class="text-dark fs-5">
                                <i class="bi bi-envelope"></i>
                            </a>
                        </div>
                        <button class="btn btn-outline-primary" 
                                data-bs-toggle="modal" 
                                data-bs-target="#directorModal">
                            View Profile
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Deputy Director -->
            <div class="col-md-6 col-lg-4">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <img src="{% static 'images/faculty/deputy.jpg' %}" 
                             alt="Deputy Director" 
                             class="rounded-circle mb-4" 
                             style="width: 200px; height: 200px; object-fit: cover;">
                        <h3 class="h4 mb-2">Dr. Sarah Smith</h3>
                        <p class="text-primary mb-3">Deputy Director</p>
                        <p class="text-muted mb-4">
                            Ph.D. in Medical Informatics<br>
                            Lead Researcher, Cancer Imaging AI
                        </p>
                        <div class="d-flex justify-content-center gap-3 mb-4">
                            <a href="#" class="text-dark fs-5">
                                <i class="bi bi-linkedin"></i>
                            </a>
                            <a href="#" class="text-dark fs-5">
                                <i class="bi bi-google"></i>
                            </a>
                            <a href="#" class="text-dark fs-5">
                                <i class="bi bi-envelope"></i>
                            </a>
                        </div>
                        <button class="btn btn-outline-primary" 
                                data-bs-toggle="modal" 
                                data-bs-target="#deputyModal">
                            View Profile
                        </button>
                    </div>
                </div>
            </div>
            
            <!-- Research Director -->
            <div class="col-md-6 col-lg-4">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <img src="{% static 'images/faculty/research.jpg' %}" 
                             alt="Research Director" 
                             class="rounded-circle mb-4" 
                             style="width: 200px; height: 200px; object-fit: cover;">
                        <h3 class="h4 mb-2">Dr. Mohammed Hassan</h3>
                        <p class="text-primary mb-3">Research Director</p>
                        <p class="text-muted mb-4">
                            Ph.D. in Computer Science<br>
                            Expert in Machine Learning for Healthcare
                        </p>
                        <div class="d-flex justify-content-center gap-3 mb-4">
                            <a href="#" class="text-dark fs-5">
                                <i class="bi bi-linkedin"></i>
                            </a>
                            <a href="#" class="text-dark fs-5">
                                <i class="bi bi-google"></i>
                            </a>
                            <a href="#" class="text-dark fs-5">
                                <i class="bi bi-envelope"></i>
                            </a>
                        </div>
                        <button class="btn btn-outline-primary" 
                                data-bs-toggle="modal" 
                                data-bs-target="#researchModal">
                            View Profile
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Research Faculty Section -->
<section class="research-faculty bg-light py-5 mb-5">
    <div class="container">
        <h2 class="h3 text-center mb-5">Research Faculty</h2>
        
        <div class="row g-4">
            <!-- Faculty Members -->
            {% for faculty in research_faculty %}
            <div class="col-md-6 col-lg-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <img src="{{ faculty.image.url }}" 
                             alt="{{ faculty.name }}" 
                             class="rounded-circle mb-3" 
                             style="width: 150px; height: 150px; object-fit: cover;">
                        <h3 class="h5 mb-2">{{ faculty.name }}</h3>
                        <p class="text-primary small mb-2">{{ faculty.title }}</p>
                        <p class="text-muted small mb-3">{{ faculty.specialization }}</p>
                        <div class="d-flex justify-content-center gap-2">
                            {% if faculty.linkedin_url %}
                            <a href="{{ faculty.linkedin_url }}" class="text-dark">
                                <i class="bi bi-linkedin"></i>
                            </a>
                            {% endif %}
                            {% if faculty.google_scholar %}
                            <a href="{{ faculty.google_scholar }}" class="text-dark">
                                <i class="bi bi-google"></i>
                            </a>
                            {% endif %}
                            {% if faculty.email %}
                            <a href="mailto:{{ faculty.email }}" class="text-dark">
                                <i class="bi bi-envelope"></i>
                            </a>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</section>

<!-- Clinical Faculty Section -->
<section class="clinical-faculty mb-5">
    <div class="container">
        <h2 class="h3 text-center mb-5">Clinical Faculty</h2>
        
        <div class="row g-4">
            <!-- Clinical Faculty Members -->
            {% for faculty in clinical_faculty %}
            <div class="col-md-6 col-lg-3">
                <div class="card border-0 shadow-sm h-100">
                    <div class="card-body text-center">
                        <img src="{{ faculty.image.url }}" 
                             alt="{{ faculty.name }}" 
                             class="rounded-circle mb-3" 
                             style="width: 150px; height: 150px; object-fit: cover;">
                        <h3 class="h5 mb-2">{{ faculty.name }}</h3>
                        <p class="text-primary small mb-2">{{ faculty.title }}</p>
                        <p class="text-muted small mb-3">{{ faculty.department }}</p>
                        <div class="d-flex justify-content-center gap-2">
                            {% if faculty.linkedin_url %}
                            <a href="{{ faculty.linkedin_url }}" class="text-dark">
                                <i class="bi bi-linkedin"></i>
                            </a>
                            {% endif %}
                            {% if faculty.website %}
                            <a href="{{ faculty.website }}" class="text-dark">
                                <i class="bi bi-globe"></i>
                            </a>
                            {% endif %}
                            {% if faculty.email %}
                            <a href="mailto:{{ faculty.email }}" class="text-dark">
                                <i class="bi bi-envelope"></i>
                            </a>
                            {% endif %}
                        </div>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</section>

<!-- Faculty Modals -->
{% for faculty in all_faculty %}
<div class="modal fade" id="modal{{ faculty.id }}" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header border-0">
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center px-4 pb-5">
                <img src="{{ faculty.image.url }}" 
                     alt="{{ faculty.name }}" 
                     class="rounded-circle mb-4" 
                     style="width: 200px; height: 200px; object-fit: cover;">
                <h2 class="h4 mb-2">{{ faculty.name }}</h2>
                <p class="text-primary mb-4">{{ faculty.title }}</p>
                
                <div class="row mb-4">
                    <div class="col-md-6 mb-3 mb-md-0">
                        <h3 class="h6 text-uppercase mb-3">Education</h3>
                        <ul class="list-unstyled text-muted">
                            {% for education in faculty.education.all %}
                            <li class="mb-2">{{ education.degree }}</li>
                            {% endfor %}
                        </ul>
                    </div>
                    <div class="col-md-6">
                        <h3 class="h6 text-uppercase mb-3">Research Interests</h3>
                        <ul class="list-unstyled text-muted">
                            {% for interest in faculty.research_interests.all %}
                            <li class="mb-2">{{ interest.name }}</li>
                            {% endfor %}
                        </ul>
                    </div>
                </div>
                
                <div class="mb-4">
                    <h3 class="h6 text-uppercase mb-3">Biography</h3>
                    <p class="text-muted">{{ faculty.bio }}</p>
                </div>
                
                <div class="mb-4">
                    <h3 class="h6 text-uppercase mb-3">Selected Publications</h3>
                    <ul class="list-unstyled text-muted">
                        {% for publication in faculty.selected_publications.all %}
                        <li class="mb-2">{{ publication.citation }}</li>
                        {% endfor %}
                    </ul>
                </div>
                
                <div class="d-flex justify-content-center gap-3">
                    {% if faculty.linkedin_url %}
                    <a href="{{ faculty.linkedin_url }}" class="btn btn-outline-primary">
                        <i class="bi bi-linkedin"></i> LinkedIn
                    </a>
                    {% endif %}
                    {% if faculty.google_scholar %}
                    <a href="{{ faculty.google_scholar }}" class="btn btn-outline-primary">
                        <i class="bi bi-google"></i> Google Scholar
                    </a>
                    {% endif %}
                    {% if faculty.email %}
                    <a href="mailto:{{ faculty.email }}" class="btn btn-outline-primary">
                        <i class="bi bi-envelope"></i> Email
                    </a>
                    {% endif %}
                </div>
            </div>
        </div>
    </div>
</div>
{% endfor %}

<!-- Join Us Section -->
<section class="join-us bg-light py-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8 text-center">
                <h2 class="h3 mb-4">Join Our Faculty</h2>
                <p class="mb-4">
                    We're always looking for talented researchers and clinicians to join our team. 
                    If you're passionate about advancing AI in healthcare, we'd love to hear from you.
                </p>
                <a href="{% url 'careers' %}" class="btn btn-primary">
                    View Open Positions
                </a>
            </div>
        </div>
    </div>
</section>
{% endblock %}

# Contents from: .\templates\projects\faq.html
{% extends 'base.html' %}
{% load static %}

{% block title %}FAQ - KHCC_PSUT AI Lab{% endblock %}

{% block content %}
<!-- Hero Section -->
<section class="hero bg-primary text-white py-5 mb-5">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-8 mx-auto text-center">
                <h1 class="display-4 fw-bold mb-4">Frequently Asked Questions</h1>
                <p class="lead mb-0">
                    Find answers to common questions about our AI Lab and collaboration opportunities.
                </p>
            </div>
        </div>
    </div>
</section>

<!-- FAQ Section -->
<section class="faq mb-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="accordion" id="faqAccordion">
                    <!-- General Questions -->
                    <div class="mb-4">
                        <h2 class="h4 mb-3">General Questions</h2>
                        
                        <div class="accordion-item border-0 shadow-sm mb-3">
                            <h3 class="accordion-header">
                                <button class="accordion-button" type="button" 
                                        data-bs-toggle="collapse" 
                                        data-bs-target="#faq1">
                                    What is KHCC_PSUT AI Lab?
                                </button>
                            </h3>
                            <div id="faq1" class="accordion-collapse collapse show" 
                                 data-bs-parent="#faqAccordion">
                                <div class="accordion-body">
                                    KHCC_PSUT AI Lab is a collaborative research initiative between 
                                    King Hussein Cancer Center and Princess Sumaya University for 
                                    Technology, focusing on developing AI solutions for healthcare, 
                                    particularly in cancer research and treatment.
                                </div>
                            </div>
                        </div>
                        
                        <div class="accordion-item border-0 shadow-sm mb-3">
                            <h3 class="accordion-header">
                                <button class="accordion-button collapsed" type="button" 
                                        data-bs-toggle="collapse" 
                                        data-bs-target="#faq2">
                                    How can I get involved with the lab?
                                </button>
                            </h3>
                            <div id="faq2" class="accordion-collapse collapse" 
                                 data-bs-parent="#faqAccordion">
                                <div class="accordion-body">
                                    There are several ways to get involved:
                                    <ul>
                                        <li>Submit research proposals</li>
                                        <li>Apply for internships or research positions</li>
                                        <li>Collaborate on existing projects</li>
                                        <li>Attend our workshops and seminars</li>
                                    </ul>
                                    Contact us for more information about specific opportunities.
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Project Submission -->
                    <div class="mb-4">
                        <h2 class="h4 mb-3">Project Submission</h2>
                        
                        <div class="accordion-item border-0 shadow-sm mb-3">
                            <h3 class="accordion-header">
                                <button class="accordion-button collapsed" type="button" 
                                        data-bs-toggle="collapse" 
                                        data-bs-target="#faq3">
                                    How do I submit a project?
                                </button>
                            </h3>
                            <div id="faq3" class="accordion-collapse collapse" 
                                 data-bs-parent="#faqAccordion">
                                <div class="accordion-body">
                                    To submit a project:
                                    <ol>
                                        <li>Create an account or sign in</li>
                                        <li>Click on "Submit Project" in the navigation menu</li>
                                        <li>Fill out the project details form</li>
                                        <li>Include your GitHub repository link</li>
                                        <li>Add relevant tags</li>
                                        <li>Submit for review</li>
                                    </ol>
                                </div>
                            </div>
                        </div>
                        
                        <div class="accordion-item border-0 shadow-sm mb-3">
                            <h3 class="accordion-header">
                                <button class="accordion-button collapsed" type="button" 
                                        data-bs-toggle="collapse" 
                                        data-bs-target="#faq4">
                                    What types of projects can I submit?
                                </button>
                            </h3>
                            <div id="faq4" class="accordion-collapse collapse" 
                                 data-bs-parent="#faqAccordion">
                                <div class="accordion-body">
                                    We accept projects related to:
                                    <ul>
                                        <li>Medical imaging and diagnosis</li>
                                        <li>Clinical data analysis</li>
                                        <li>Patient monitoring systems</li>
                                        <li>Drug discovery</li>
                                        <li>Healthcare process optimization</li>
                                        <li>Other healthcare-related AI applications</li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Research & Collaboration -->
                    <div class="mb-4">
                        <h2 class="h4 mb-3">Research & Collaboration</h2>
                        
                        <div class="accordion-item border-0 shadow-sm mb-3">
                            <h3 class="accordion-header">
                                <button class="accordion-button collapsed" type="button" 
                                        data-bs-toggle="collapse" 
                                        data-bs-target="#faq5">
                                    How can I collaborate with the lab?
                                </button>
                            </h3>
                            <div id="faq5" class="accordion-collapse collapse" 
                                 data-bs-parent="#faqAccordion">
                                <div class="accordion-body">
                                    We welcome collaborations from:
                                    <ul>
                                        <li>Academic researchers</li>
                                        <li>Healthcare professionals</li>
                                        <li>Industry partners</li>
                                        <li>Students</li>
                                    </ul>
                                    Contact our research team to discuss potential collaboration 
                                    opportunities.
                                </div>
                            </div>
                        </div>
                        
                        <div class="accordion-item border-0 shadow-sm mb-3">
                            <h3 class="accordion-header">
                                <button class="accordion-button collapsed" type="button" 
                                        data-bs-toggle="collapse" 
                                        data-bs-target="#faq6">
                                    Do you offer research funding?
                                </button>
                            </h3>
                            <div id="faq6" class="accordion-collapse collapse" 
                                 data-bs-parent="#faqAccordion">
                                <div class="accordion-body">
                                    Yes, we offer research funding through various programs:
                                    <ul>
                                        <li>Graduate research fellowships</li>
                                        <li>Project-specific grants</li>
                                        <li>Collaborative research initiatives</li>
                                    </ul>
                                    Check our research page for current opportunities.
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Contact Section -->
<section class="contact-section bg-light py-5">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-lg-8 text-center">
                <h2 class="h3 mb-4">Still Have Questions?</h2>
                <p class="mb-4">
                    We're here to help! Feel free to reach out if you need any assistance 
                    or have questions not covered in our FAQ.
                </p>
                <div class="d-flex justify-content-center gap-3">
                    <a href="{% url 'contact' %}" class="btn btn-primary">
                        Contact Us
                    </a>
                    <a href="mailto:support@khccpsutailab.com" class="btn btn-outline-primary">
                        Email Support
                    </a>
                </div>
            </div>
        </div>
    </div>
</section>
{% endblock %}

# Contents from: .\templates\projects\homepage.html
{% extends 'base.html' %}
{% load static %}
{% load humanize %}

{% block title %}KHCC_PSUT AI Lab - Home{% endblock %}

{% block content %}
<!-- Hero Section -->
<section class="hero bg-primary text-white py-5 mb-5">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <h1 class="display-4 fw-bold mb-4">Welcome to KHCC_PSUT AI Lab</h1>
                <p class="lead mb-4">
                    A collaborative platform for sharing and discovering innovative AI projects 
                    between King Hussein Cancer Center and Princess Sumaya University for Technology.
                </p>
                {% if not user.is_authenticated %}
                <div class="d-flex gap-3">
                    <a href="{% url 'account_signup' %}" class="btn btn-light btn-lg">
                        Join Now
                    </a>
                    <a href="{% url 'account_login' %}" class="btn btn-outline-light btn-lg">
                        Sign In
                    </a>
                </div>
                {% else %}
                <a href="{% url 'submit_project' %}" class="btn btn-light btn-lg">
                    Share Your Project
                </a>
                {% endif %}
            </div>
            <div class="col-lg-6 d-none d-lg-block">
                <div class="text-center">
                    <img src="{% static 'images/collaboration.svg' %}" alt="Collaboration" class="img-fluid" style="max-height: 400px;">
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Featured Projects Section -->
<section class="featured-projects mb-5">
    <div class="container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="h3 mb-0">Featured Projects</h2>
            <a href="{% url 'project_list' %}" class="btn btn-link text-decoration-none">
                View All Projects <i class="bi bi-arrow-right"></i>
            </a>
        </div>
        
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            {% for project in featured_projects %}
            <div class="col">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <div class="d-flex align-items-center mb-3">
                            <img src="{% if project.author.profile.avatar %}{{ project.author.profile.avatar.url }}{% else %}https://ui-avatars.com/api/?name={{ project.author.username }}{% endif %}" 
                                 alt="{{ project.author.username }}" 
                                 class="rounded-circle me-2" 
                                 style="width: 32px; height: 32px;">
                            <div>
                                <a href="{% url 'user_profile' project.author.username %}" 
                                   class="text-decoration-none text-dark">{{ project.author.username }}</a>
                                <div class="text-muted small">{{ project.created_at|naturaltime }}</div>
                            </div>
                        </div>
                        
                        <h3 class="h5 card-title mb-3">
                            <a href="{% url 'project_detail' project.pk %}" 
                               class="text-decoration-none text-dark">{{ project.title }}</a>
                        </h3>
                        
                        <p class="card-text text-muted mb-3">
                            {{ project.description|truncatewords:30 }}
                        </p>
                        
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="d-flex gap-3">
                                <span title="Claps">
                                    <i class="bi bi-hand-thumbs-up"></i> {{ project.claps }}
                                </span>
                                <span title="Comments">
                                    <i class="bi bi-chat"></i> {{ project.comment_count }}
                                </span>
                            </div>
                            <div class="tag-cloud">
                                {% for tag in project.tag_list|slice:":3" %}
                                <span class="badge bg-light text-dark">{{ tag }}</span>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</section>

<!-- Latest Projects Section -->
<section class="latest-projects bg-light py-5 mb-5">
    <div class="container">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="h3 mb-0">Latest Projects</h2>
            <a href="{% url 'project_list' %}?sort=-created_at" class="btn btn-link text-decoration-none">
                View All <i class="bi bi-arrow-right"></i>
            </a>
        </div>
        
        <div class="row row-cols-1 row-cols-md-2 g-4">
            {% for project in latest_projects %}
            <div class="col">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body">
                        <h3 class="h5 card-title mb-3">
                            <a href="{% url 'project_detail' project.pk %}" 
                               class="text-decoration-none text-dark">{{ project.title }}</a>
                        </h3>
                        
                        <p class="card-text text-muted mb-3">
                            {{ project.description|truncatewords:20 }}
                        </p>
                        
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">{{ project.created_at|naturaltime }}</small>
                            <a href="{{ project.github_link }}" 
                               target="_blank" 
                               class="btn btn-sm btn-outline-dark">
                                <i class="bi bi-github"></i> View Code
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            {% endfor %}
        </div>
    </div>
</section>

<!-- Statistics Section -->
<section class="statistics mb-5">
    <div class="container">
        <div class="row g-4">
            <div class="col-md-3">
                <div class="card border-0 shadow-sm text-center">
                    <div class="card-body">
                        <i class="bi bi-folder-fill display-4 text-primary mb-3"></i>
                        <h3 class="h4">{{ stats.total_projects }}</h3>
                        <p class="text-muted mb-0">Projects Shared</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-0 shadow-sm text-center">
                    <div class="card-body">
                        <i class="bi bi-people-fill display-4 text-primary mb-3"></i>
                        <h3 class="h4">{{ stats.total_users }}</h3>
                        <p class="text-muted mb-0">Community Members</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-0 shadow-sm text-center">
                    <div class="card-body">
                        <i class="bi bi-chat-fill display-4 text-primary mb-3"></i>
                        <h3 class="h4">{{ stats.total_comments }}</h3>
                        <p class="text-muted mb-0">Comments Made</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card border-0 shadow-sm text-center">
                    <div class="card-body">
                        <i class="bi bi-hand-thumbs-up-fill display-4 text-primary mb-3"></i>
                        <h3 class="h4">{{ stats.total_claps }}</h3>
                        <p class="text-muted mb-0">Claps Given</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Partners Section -->
<section class="partners bg-light py-5 mb-5">
    <div class="container">
        <h2 class="h3 text-center mb-5">Our Partners</h2>
        <div class="row justify-content-center align-items-center">
            <div class="col-md-4 text-center mb-4 mb-md-0">
                <img src="{% static 'images/khcc-logo.png' %}" 
                     alt="King Hussein Cancer Center" 
                     class="img-fluid" 
                     style="max-height: 100px;">
            </div>
            <div class="col-md-4 text-center">
                <img src="{% static 'images/psut-logo.png' %}" 
                     alt="Princess Sumaya University for Technology" 
                     class="img-fluid" 
                     style="max-height: 100px;">
            </div>
        </div>
    </div>
</section>

<!-- Call to Action -->
<section class="cta mb-5">
    <div class="container">
        <div class="card border-0 bg-primary text-white shadow">
            <div class="card-body text-center py-5">
                <h2 class="h3 mb-4">Ready to Share Your AI Project?</h2>
                <p class="lead mb-4">
                    Join our community of innovators and showcase your work to the world.
                </p>
                {% if user.is_authenticated %}
                <a href="{% url 'submit_project' %}" class="btn btn-light btn-lg">
                    Submit Your Project
                </a>
                {% else %}
                <a href="{% url 'account_signup' %}" class="btn btn-light btn-lg">
                    Get Started
                </a>
                {% endif %}
            </div>
        </div>
    </div>
</section>
{% endblock %}

# Contents from: .\templates\projects\notification.html
{% extends 'base.html' %}
{% load static %}

{% block content %}
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-header bg-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Notifications</h5>
                    {% if notifications %}
                    <a href="?mark_read=true" class="btn btn-sm btn-outline-primary">
                        Mark all as read
                    </a>
                    {% endif %}
                </div>
                <div class="list-group list-group-flush">
                    {% for notification in notifications %}
                    <div class="list-group-item {% if not notification.is_read %}bg-light{% endif %}">
                        <div class="d-flex">
                            <img src="{% if notification.sender.profile.avatar %}{{ notification.sender.profile.avatar.url }}{% else %}https://ui-avatars.com/api/?name={{ notification.sender.username }}{% endif %}" 
                                 class="rounded-circle me-3" 
                                 style="width: 40px; height: 40px; object-fit: cover;">
                            <div class="flex-grow-1">
                                <div class="d-flex justify-content-between align-items-center">
                                    <p class="mb-1">{{ notification.message }}</p>
                                    <small class="text-muted">{{ notification.created_at|timesince }} ago</small>
                                </div>
                                <div>
                                    <a href="{% url 'mark_notification_read' notification.id %}" 
                                       class="btn btn-sm btn-link px-0">
                                        View
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                    {% empty %}
                    <div class="list-group-item text-center py-5">
                        <i class="bi bi-bell text-muted display-4"></i>
                        <p class="text-muted mt-3 mb-0">No notifications yet</p>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

# Contents from: .\templates\projects\project_detail.html
{% extends 'base.html' %}
{% load static %}
{% load crispy_forms_tags %}

{% block content %}
<div class="container">
    <article class="row justify-content-center">
        <div class="col-lg-8">
            <!-- Author Info -->
            <div class="d-flex align-items-center mb-4">
                <img src="{% if project.author.profile.avatar %}{{ project.author.profile.avatar.url }}{% else %}https://ui-avatars.com/api/?name={{ project.author.username }}{% endif %}" 
                     alt="{{ project.author.username }}" 
                     class="rounded-circle me-3" 
                     style="width: 50px; height: 50px; object-fit: cover;">
                <div>
                    <h6 class="mb-0">{{ project.author.username }}</h6>
                    <small class="text-muted">
                        {{ project.created_at|date:"M d, Y" }} · 
                        {{ project.comment_count }} comments
                    </small>
                </div>
            </div>

            <!-- Project Content -->
            <h1 class="display-4 mb-4">{{ project.title }}</h1>
            
            <div class="tag-cloud mb-4">
                {% for tag in project.tag_list %}
                <a href="{% url 'project_list' %}?tag={{ tag }}" 
                   class="badge bg-light text-dark">
                    {{ tag }}
                </a>
                {% endfor %}
            </div>
            
            <div class="project-content mb-5">
                {{ project.description|linebreaks }}
            </div>
            
            <div class="d-flex justify-content-between align-items-center mb-5">
                <a href="{{ project.github_link }}" 
                   target="_blank" 
                   class="btn btn-outline-dark">
                    <i class="bi bi-github"></i> View on GitHub
                </a>
                
                <div class="d-flex align-items-center">
                    {% if user.is_authenticated %}
                    <button id="clap-btn" 
                            data-project-id="{{ project.id }}" 
                            class="btn btn-outline-primary clap-button me-2 {% if user_has_clapped %}active{% endif %}">
                        <i class="bi bi-hand-thumbs-up{% if user_has_clapped %}-fill{% endif %}"></i>
                        <span id="clap-count">{{ project.claps }}</span>
                    </button>
                    {% else %}
                    <a href="{% url 'account_login' %}" class="btn btn-outline-primary">
                        Sign in to clap
                    </a>
                    {% endif %}
                </div>
            </div>
            
            <!-- Comments Section -->
            <section class="comments-section">
                <h3 class="mb-4">Comments</h3>
                
                {% if user.is_authenticated %}
                <div class="card mb-4">
                    <div class="card-body">
                        <form method="post" id="comment-form">
                            {% csrf_token %}
                            {{ form|crispy }}
                            <input type="hidden" name="parent_id" id="parent-id">
                            <div class="d-flex justify-content-end">
                                <button type="submit" class="btn btn-primary">
                                    Post Comment
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
                {% else %}
                <div class="alert alert-info">
                    Please <a href="{% url 'account_login' %}">sign in</a> to post a comment.
                </div>
                {% endif %}
                
                <div class="comments-list">
                    {% for comment in comments %}
                    <div class="comment-thread mb-4">
                        <!-- Parent Comment -->
                        <div class="card">
                            <div class="card-body">
                                <div class="d-flex mb-3">
                                    <img src="{% if comment.user.profile.avatar %}{{ comment.user.profile.avatar.url }}{% else %}https://ui-avatars.com/api/?name={{ comment.user.username }}{% endif %}" 
                                         alt="{{ comment.user.username }}" 
                                         class="rounded-circle me-2" 
                                         style="width: 32px; height: 32px;">
                                    <div>
                                        <h6 class="mb-0">{{ comment.user.username }}</h6>
                                        <small class="text-muted">
                                            {{ comment.created_at|timesince }} ago
                                        </small>
                                    </div>
                                </div>
                                <p class="mb-2">{{ comment.content }}</p>
                                {% if user.is_authenticated %}
                                <button class="btn btn-sm btn-link reply-link px-0" 
                                        data-comment-id="{{ comment.id }}">
                                    Reply
                                </button>
                                {% endif %}
                            </div>
                        </div>
                        
                        <!-- Replies -->
                        {% for reply in comment.replies.all %}
                        <div class="card ms-4 mt-2">
                            <div class="card-body">
                                <div class="d-flex mb-3">
                                    <img src="{% if reply.user.profile.avatar %}{{ reply.user.profile.avatar.url }}{% else %}https://ui-avatars.com/api/?name={{ reply.user.username }}{% endif %}" 
                                         alt="{{ reply.user.username }}" 
                                         class="rounded-circle me-2" 
                                         style="width: 32px; height: 32px;">
                                    <div>
                                        <h6 class="mb-0">{{ reply.user.username }}</h6>
                                        <small class="text-muted">
                                            {{ reply.created_at|timesince }} ago
                                        </small>
                                    </div>
                                </div>
                                <p class="mb-0">{{ reply.content }}</p>
                            </div>
                        </div>
                        {% endfor %}
                    </div>
                    {% empty %}
                    <div class="text-center py-4">
                        <p class="text-muted mb-0">No comments yet. Be the first to share your thoughts!</p>
                    </div>
                    {% endfor %}
                </div>
            </section>
        </div>
    </article>
</div>
{% endblock %}

{% block extra_js %}
<script>
$(document).ready(function() {
    // Clap button functionality
    $('#clap-btn').click(function() {
        const btn = $(this);
        const projectId = btn.data('project-id');
        
        $.ajax({
            url: '{% url "clap_project" %}',
            method: 'POST',
            data: {
                'project_id': projectId,
                'csrfmiddlewaretoken': '{{ csrf_token }}'
            },
            success: function(response) {
                if (response.status === 'success') {
                    $('#clap-count').text(response.claps);
                    btn.addClass('active');
                    btn.find('i').removeClass('bi-hand-thumbs-up').addClass('bi-hand-thumbs-up-fill');
                    
                    // Add animation
                    btn.addClass('animate__animated animate__heartBeat');
                    setTimeout(() => btn.removeClass('animate__animated animate__heartBeat'), 1000);
                } else {
                    // Handle already clapped
                    const toast = new bootstrap.Toast($('#clap-toast'));
                    toast.show();
                }
            },
            error: function() {
                alert('An error occurred while clapping.');
            }
        });
    });

    // Reply functionality
    $('.reply-link').click(function(e) {
        e.preventDefault();
        const commentId = $(this).data('comment-id');
        $('#parent-id').val(commentId);
        
        // Scroll to comment form
        $([document.documentElement, document.body]).animate({
            scrollTop: $("#comment-form").offset().top - 100
        }, 1000);
        
        // Focus on comment textarea
        $('#comment-form textarea').focus();
    });
});
</script>
{% endblock %}

# Contents from: .\templates\projects\project_list.html
{% extends 'base.html' %}
{% load static %}
{% load crispy_forms_tags %}

{% block content %}
<div class="container py-5">
    <!-- Search Section -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form method="get" class="row g-3">
                        <div class="col-md-4">
                            {{ search_form.query|as_crispy_field }}
                        </div>
                        <div class="col-md-4">
                            {{ search_form.tags|as_crispy_field }}
                        </div>
                        <div class="col-md-3">
                            {{ search_form.sort|as_crispy_field }}
                        </div>
                        <div class="col-md-1 d-flex align-items-end">
                            <button type="submit" class="btn btn-primary w-100">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Main Content -->
        <div class="col-lg-8">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="h4 mb-0">Featured Projects</h2>
                {% if user.is_authenticated %}
                <a href="{% url 'projects:submit_project' %}" class="btn btn-primary">
                    <i class="bi bi-plus-lg"></i> Share Project
                </a>
                {% endif %}
            </div>

            <div class="row row-cols-1 row-cols-md-2 g-4">
                {% for project in page_obj %}
                <div class="col">
                    <article class="card h-100 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex align-items-center mb-3">
                                <img src="{% if project.author.profile.avatar %}{{ project.author.profile.avatar.url }}{% else %}https://ui-avatars.com/api/?name={{ project.author.username }}{% endif %}" 
                                     alt="{{ project.author.username }}" 
                                     class="rounded-circle me-2" 
                                     style="width: 32px; height: 32px; object-fit: cover;">
                                <div>
                                    <a href="{% url 'projects:user_profile' project.author.username %}" 
                                       class="text-decoration-none text-dark">
                                        {{ project.author.username }}
                                    </a>
                                    <div class="text-muted small">
                                        {{ project.created_at|date:"M d, Y" }}
                                    </div>
                                </div>
                            </div>

                            <h3 class="h5 card-title mb-3">
                                <a href="{% url 'projects:project_detail' project.pk %}" 
                                   class="text-decoration-none text-dark">
                                    {{ project.title }}
                                </a>
                            </h3>

                            <p class="card-text text-muted mb-3">
                                {{ project.description|truncatewords:30 }}
                            </p>

                            <div class="tag-cloud mb-3">
                                {% for tag in project.tag_list %}
                                <a href="?tags={{ tag }}" 
                                   class="badge bg-light text-dark text-decoration-none me-1">
                                    {{ tag }}
                                </a>
                                {% endfor %}
                            </div>

                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex align-items-center">
                                    <span class="me-3" title="Claps">
                                        <i class="bi bi-hand-thumbs-up"></i>
                                        {{ project.claps }}
                                    </span>
                                    <span title="Comments">
                                        <i class="bi bi-chat"></i>
                                        {{ project.comment_count }}
                                    </span>
                                </div>
                                <a href="{{ project.github_link }}" 
                                   target="_blank" 
                                   class="btn btn-sm btn-outline-dark">
                                    <i class="bi bi-github"></i>
                                </a>
                            </div>
                        </div>
                    </article>
                </div>
                {% empty %}
                <div class="col-12">
                    <div class="text-center py-5">
                        <h3>No projects found</h3>
                        <p class="text-muted">Try adjusting your search criteria</p>
                        {% if user.is_authenticated %}
                        <a href="{% url 'projects:submit_project' %}" class="btn btn-primary">
                            Share Your Project
                        </a>
                        {% endif %}
                    </div>
                </div>
                {% endfor %}
            </div>

            {% include "includes/pagination.html" %}
        </div>

        <!-- Sidebar -->
        <div class="col-lg-4">
            <!-- Welcome Card -->
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <h5 class="card-title">Welcome to KHCC_PSUT AI Lab</h5>
                    <p class="card-text">
                        Discover innovative AI projects, share your work, and connect with 
                        fellow developers.
                    </p>
                    {% if user.is_authenticated %}
                    <a href="{% url 'projects:submit_project' %}" class="btn btn-primary w-100">
                        Share Your Project
                    </a>
                    {% else %}
                    <a href="{% url 'account_login' %}" class="btn btn-primary w-100">
                        Sign in to Share
                    </a>
                    {% endif %}
                </div>
            </div>

            <!-- Popular Tags -->
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title">Popular Tags</h5>
                    <div class="tag-cloud">
                        {% for tag in popular_tags %}
                        <a href="?tags={{ tag.name }}" 
                           class="badge bg-light text-dark text-decoration-none">
                            {{ tag.name }}
                            <span class="text-muted">({{ tag.count }})</span>
                        </a>
                        {% endfor %}
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

# Contents from: .\templates\projects\rateing_model.html
<!-- templates/projects/includes/rating_modal.html -->
<div class="modal fade" id="ratingModal" tabindex="-1" aria-labelledby="ratingModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="ratingModalLabel">Rate this project</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="ratingForm" method="post">
                <div class="modal-body">
                    {% csrf_token %}
                    <div class="rating-stars mb-3">
                        {% for value, label in rating_form.score.field.choices %}
                        <input type="radio" name="score" value="{{ value }}" id="star{{ value }}"
                               class="btn-check" autocomplete="off">
                        <label for="star{{ value }}" class="btn btn-outline-warning">
                            <i class="bi bi-star-fill"></i>
                        </label>
                        {% endfor %}
                    </div>
                    {{ rating_form.review|as_crispy_field }}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Submit Rating</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- templates/projects/bookmarks.html -->
{% extends 'base.html' %}
{% load static %}

{% block content %}
<div class="container py-5">
    <div class="row">
        <div class="col-lg-8 mx-auto">
            <h2 class="mb-4">Your Bookmarks</h2>
            {% for bookmark in bookmarks %}
            <div class="card mb-3 shadow-sm">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-start">
                        <h5 class="card-title mb-3">
                            <a href="{% url 'project_detail' bookmark.project.pk %}" 
                               class="text-decoration-none text-dark">
                                {{ bookmark.project.title }}
                            </a>
                        </h5>
                        <button class="btn btn-sm btn-outline-danger remove-bookmark" 
                                data-project-id="{{ bookmark.project.pk }}">
                            <i class="bi bi-bookmark-x"></i>
                        </button>
                    </div>
                    
                    <p class="card-text text-muted mb-3">
                        {{ bookmark.project.description|truncatewords:30 }}
                    </p>
                    
                    <div class="mb-3">
                        <small class="text-muted">Bookmarked on: {{ bookmark.created_at|date }}</small>
                    </div>
                    
                    <form class="bookmark-notes-form">
                        <div class="form-group">
                            <label class="form-label">Your Notes:</label>
                            <textarea class="form-control" rows="2" 
                                      placeholder="Add personal notes about this project...">{{ bookmark.notes }}</textarea>
                        </div>
                        <button type="submit" class="btn btn-sm btn-primary mt-2">
                            Save Notes
                        </button>
                    </form>
                </div>
            </div>
            {% empty %}
            <div class="text-center py-5">
                <i class="bi bi-bookmark display-1 text-muted"></i>
                <h3 class="mt-3">No bookmarks yet</h3>
                <p class="text-muted">Start bookmarking projects you'd like to revisit later</p>
                <a href="{% url 'project_list' %}" class="btn btn-primary">
                    Browse Projects
                </a>
            </div>
            {% endfor %}
        </div>
    </div>
</div>
{% endblock %}

<!-- templates/projects/analytics.html -->
{% extends 'base.html' %}
{% load static %}

{% block content %}
<div class="container py-5">
    <div class="row">
        <div class="col-lg-10 mx-auto">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2>Analytics for {{ project.title }}</h2>
                <a href="{% url 'project_detail' project.pk %}" class="btn btn-outline-primary">
                    <i class="bi bi-arrow-left"></i> Back to Project
                </a>
            </div>
            
            <!-- Overview Cards -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card bg-primary text-white">
                        <div class="card-body">
                            <h6 class="card-title">Total Views</h6>
                            <h2 class="mb-0">{{ analytics.view_count }}</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-success text-white">
                        <div class="card-body">
                            <h6 class="card-title">Unique Visitors</h6>
                            <h2 class="mb-0">{{ analytics.unique_visitors }}</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-info text-white">
                        <div class="card-body">
                            <h6 class="card-title">GitHub Clicks</h6>
                            <h2 class="mb-0">{{ analytics.github_clicks }}</h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card bg-warning text-white">
                        <div class="card-body">
                            <h6 class="card-title">Avg. Time Spent</h6>
                            <h2 class="mb-0">{{ analytics.avg_time_spent|time:"i:s" }}</h2>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Weekly vs Monthly Stats -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Last 7 Days</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="weeklyChart"></canvas>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Last 30 Days</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="monthlyChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Engagement Metrics -->
            <div class="row mb-4">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">User Engagement</h5>
                        </div>
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Metric</th>
                                            <th>Last 7 Days</th>
                                            <th>Last 30 Days</th>
                                            <th>Trend</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>Comments</td>
                                            <td>{{ weekly_stats.comments }}</td>
                                            <td>{{ monthly_stats.comments }}</td>
                                            <td>
                                                {% if weekly_stats.comments > monthly_stats.comments %}
                                                <span class="text-success">
                                                    <i class="bi bi-arrow-up"></i>
                                                    {{ weekly_stats.comments|percentage:monthly_stats.comments }}%
                                                </span>
                                                {% else %}
                                                <span class="text-danger">
                                                    <i class="bi bi-arrow-down"></i>
                                                    {{ monthly_stats.comments|percentage:weekly_stats.comments }}%
                                                </span>
                                                {% endif %}
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Claps</td>
                                            <td>{{ weekly_stats.claps }}</td>
                                            <td>{{ monthly_stats.claps }}</td>
                                            <td>
                                                {% if weekly_stats.claps > monthly_stats.claps %}
                                                <span class="text-success">
                                                    <i class="bi bi-arrow-up"></i>
                                                    {{ weekly_stats.claps|percentage:monthly_stats.claps }}%
                                                </span>
                                                {% else %}
                                                <span class="text-danger">
                                                    <i class="bi bi-arrow-down"></i>
                                                    {{ monthly_stats.claps|percentage:weekly_stats.claps }}%
                                                </span>
                                                {% endif %}
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Ratings</td>
                                            <td>{{ weekly_stats.ratings }}</td>
                                            <td>{{ monthly_stats.ratings }}</td>
                                            <td>
                                                {% if weekly_stats.ratings > monthly_stats.ratings %}
                                                <span class="text-success">
                                                    <i class="bi bi-arrow-up"></i>
                                                    {{ weekly_stats.ratings|percentage:monthly_stats.ratings }}%
                                                </span>
                                                {% else %}
                                                <span class="text-danger">
                                                    <i class="bi bi-arrow-down"></i>
                                                    {{ monthly_stats.ratings|percentage:weekly_stats.ratings }}%
                                                </span>
                                                {% endif %}
                                            </td>
                                        </tr>
                                        <tr>
                                            <td>Bookmarks</td>
                                            <td>{{ weekly_stats.bookmarks }}</td>
                                            <td>{{ monthly_stats.bookmarks }}</td>
                                            <td>
                                                {% if weekly_stats.bookmarks > monthly_stats.bookmarks %}
                                                <span class="text-success">
                                                    <i class="bi bi-arrow-up"></i>
                                                    {{ weekly_stats.bookmarks|percentage:monthly_stats.bookmarks }}%
                                                </span>
                                                {% else %}
                                                <span class="text-danger">
                                                    <i class="bi bi-arrow-down"></i>
                                                    {{ monthly_stats.bookmarks|percentage:weekly_stats.bookmarks }}%
                                                </span>
                                                {% endif %}
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Traffic Sources</h5>
                        </div>
                        <div class="card-body">
                            <canvas id="trafficSourcesChart"></canvas>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Visitor Demographics -->
            <div class="row mb-4">
                <div class="col-md-12">
                    <div class="card">
                        <div class="card-header">
                            <h5 class="card-title mb-0">Visitor Demographics</h5>
                        </div>
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4">
                                    <canvas id="locationChart"></canvas>
                                </div>
                                <div class="col-md-4">
                                    <canvas id="deviceChart"></canvas>
                                </div>
                                <div class="col-md-4">
                                    <canvas id="browserChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Weekly Stats Chart
    new Chart(document.getElementById('weeklyChart'), {
        type: 'line',
        data: {
            labels: {{ weekly_labels|safe }},
            datasets: [{
                label: 'Views',
                data: {{ weekly_views|safe }},
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: 'Daily Views (Last 7 Days)'
                }
            }
        }
    });

    // Monthly Stats Chart
    new Chart(document.getElementById('monthlyChart'), {
        type: 'line',
        data: {
            labels: {{ monthly_labels|safe }},
            datasets: [{
                label: 'Views',
                data: {{ monthly_views|safe }},
                borderColor: 'rgb(153, 102, 255)',
                tension: 0.1
            }]
        },
        options: {
            responsive: true,
            plugins: {
                title: {
                    display: true,
                    text: 'Daily Views (Last 30 Days)'
                }
            }
        }
    });

    // Traffic Sources Chart
    new Chart(document.getElementById('trafficSourcesChart'), {
        type: 'doughnut',
        data: {
            labels: ['Direct', 'Social', 'Search', 'Referral'],
            datasets: [{
                data: {{ traffic_sources|safe }},
                backgroundColor: [
                    'rgb(255, 99, 132)',
                    'rgb(54, 162, 235)',
                    'rgb(255, 205, 86)',
                    'rgb(75, 192, 192)'
                ]
            }]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'right'
                }
            }
        }
    });

    // Demographics Charts
    const demographicsOptions = {
        responsive: true,
        plugins: {
            legend: {
                position: 'bottom'
            }
        }
    };

    new Chart(document.getElementById('locationChart'), {
        type: 'pie',
        data: {
            labels: {{ locations|safe }},
            datasets: [{
                data: {{ location_data|safe }},
                backgroundColor: [
                    'rgb(255, 99, 132)',
                    'rgb(54, 162, 235)',
                    'rgb(255, 205, 86)',
                    'rgb(75, 192, 192)',
                    'rgb(153, 102, 255)'
                ]
            }]
        },
        options: demographicsOptions
    });

    new Chart(document.getElementById('deviceChart'), {
        type: 'pie',
        data: {
            labels: ['Desktop', 'Mobile', 'Tablet'],
            datasets: [{
                data: {{ device_data|safe }},
                backgroundColor: [
                    'rgb(255, 99, 132)',
                    'rgb(54, 162, 235)',
                    'rgb(255, 205, 86)'
                ]
            }]
        },
        options: demographicsOptions
    });

    new Chart(document.getElementById('browserChart'), {
        type: 'pie',
        data: {
            labels: ['Chrome', 'Firefox', 'Safari', 'Edge', 'Other'],
            datasets: [{
                data: {{ browser_data|safe }},
                backgroundColor: [
                    'rgb(255, 99, 132)',
                    'rgb(54, 162, 235)',
                    'rgb(255, 205, 86)',
                    'rgb(75, 192, 192)',
                    'rgb(153, 102, 255)'
                ]
            }]
        },
        options: demographicsOptions
    });
});
</script>
{% endblock %}

# Contents from: .\templates\projects\search.html
<!-- templates/projects/search.html -->
{% extends 'base.html' %}
{% load static %}
{% load crispy_forms_tags %}

{% block title %}Search Projects - {{ block.super }}{% endblock %}

{% block extra_css %}
<link href="https://cdn.jsdelivr.net/npm/bootstrap-tagsinput@0.7.1/dist/bootstrap-tagsinput.css" rel="stylesheet">
<style>
    .bootstrap-tagsinput {
        width: 100%;
        padding: 0.375rem 0.75rem;
        font-size: 1rem;
        line-height: 1.5;
        color: #212529;
        background-color: #fff;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    }
    
    .bootstrap-tagsinput input {
        width: auto;
        max-width: inherit;
    }
    
    .filter-card {
        position: sticky;
        top: 20px;
    }
    
    .search-result-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.15) !important;
    }
    
    .animated-loading {
        position: relative;
        overflow: hidden;
    }
    
    .animated-loading::after {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        animation: loading 1.5s infinite;
    }
    
    @keyframes loading {
        0% { transform: translateX(-100%); }
        100% { transform: translateX(100%); }
    }
</style>
{% endblock %}

{% block content %}
<div class="container py-5">
    <div class="row">
        <!-- Search Filters -->
        <div class="col-lg-3">
            <div class="card shadow-sm filter-card">
                <div class="card-body">
                    <h5 class="card-title mb-4">Search Filters</h5>
                    
                    <form method="get" id="searchForm" hx-get="{% url 'search_projects' %}" 
                          hx-target="#searchResults" hx-push-url="true" hx-indicator="#loading">
                        
                        <!-- Search Query -->
                        <div class="mb-3">
                            {{ form.query|as_crispy_field }}
                        </div>
                        
                        <!-- Tags -->
                        <div class="mb-3">
                            {{ form.tags|as_crispy_field }}
                        </div>
                        
                        <!-- Date Range -->
                        <div class="mb-3">
                            <label class="form-label">Date Range</label>
                            <div class="row g-2">
                                <div class="col">
                                    {{ form.date_from|as_crispy_field }}
                                </div>
                                <div class="col">
                                    {{ form.date_to|as_crispy_field }}
                                </div>
                            </div>
                        </div>
                        
                        <!-- Minimum Claps -->
                        <div class="mb-3">
                            {{ form.min_claps|as_crispy_field }}
                        </div>
                        
                        <!-- Has GitHub -->
                        <div class="mb-3">
                            <div class="form-check">
                                {{ form.has_github }}
                                <label class="form-check-label" for="{{ form.has_github.id_for_label }}">
                                    Has GitHub Repository
                                </label>
                            </div>
                        </div>
                        
                        <!-- Sort By -->
                        <div class="mb-4">
                            {{ form.sort_by|as_crispy_field }}
                        </div>
                        
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary">
                                Apply Filters
                            </button>
                            <button type="button" class="btn btn-link" onclick="resetFilters()">
                                Reset Filters
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        
        <!-- Search Results -->
        <div class="col-lg-9">
            <div id="searchResults">
                {% include 'projects/includes/project_list_results.html' %}
            </div>
        </div>
    </div>
</div>

<!-- Loading Indicator -->
<div id="loading" class="position-fixed top-50 start-50 translate-middle bg-white p-4 rounded shadow-lg d-none">
    <div class="d-flex align-items-center">
        <div class="spinner-border text-primary me-3" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <span>Loading results...</span>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="https://cdn.jsdelivr.net/npm/bootstrap-tagsinput@0.7.1/dist/bootstrap-tagsinput.min.js"></script>
<script src="https://unpkg.com/htmx.org@1.9.0"></script>
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Initialize tagsinput
    $('#id_tags').tagsinput({
        trimValue: true,
        confirmKeys: [13, 44], // Enter and comma
        maxTags: 5
    });
    
    // Auto-submit form on filter changes
    const form = document.getElementById('searchForm');
    const inputs = form.querySelectorAll('input, select');
    inputs.forEach(input => {
        input.addEventListener('change', () => {
            form.requestSubmit();
        });
    });
});

function resetFilters() {
    const form = document.getElementById('searchForm');
    form.reset();
    $('#id_tags').tagsinput('removeAll');
    form.requestSubmit();
}
</script>
{% endblock %}

<!-- templates/projects/includes/project_list_results.html -->
{% load humanize %}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h4 class="mb-0">
        Search Results 
        <small class="text-muted">({{ total_results }} projects found)</small>
    </h4>
    {% if form.is_valid and form.cleaned_data.query %}
    <p class="mb-0">
        Showing results for: <strong>{{ form.cleaned_data.query }}</strong>
    </p>
    {% endif %}
</div>

{% if projects %}
<div class="row row-cols-1 row-cols-md-2 g-4" id="projectGrid">
    {% for project in projects %}
    <div class="col">
        <div class="card h-100 border-0 shadow-sm search-result-card">
            <div class="card-body">
                <!-- Author Info -->
                <div class="d-flex align-items-center mb-3">
                    <img src="{% if project.author.profile.avatar %}{{ project.author.profile.avatar.url }}{% else %}https://ui-avatars.com/api/?name={{ project.author.username }}{% endif %}" 
                         alt="{{ project.author.username }}" 
                         class="rounded-circle me-2" 
                         style="width: 32px; height: 32px;">
                    <div>
                        <a href="{% url 'user_profile' project.author.username %}" 
                           class="text-decoration-none text-dark">
                            {{ project.author.username }}
                        </a>
                        <div class="text-muted small">
                            {{ project.created_at|naturaltime }}
                        </div>
                    </div>
                </div>
                
                <!-- Project Title -->
                <h5 class="card-title mb-3">
                    <a href="{% url 'project_detail' project.pk %}" 
                       class="text-decoration-none text-dark">
                        {{ project.title }}
                    </a>
                </h5>
                
                <!-- Project Description -->
                <p class="card-text text-muted mb-3">
                    {{ project.description|truncatewords:30 }}
                </p>
                
                <!-- Tags -->
                <div class="mb-3">
                    {% for tag in project.tag_list %}
                    <a href="?tags={{ tag }}" 
                       class="badge bg-light text-dark text-decoration-none me-1">
                        {{ tag }}
                    </a>
                    {% endfor %}
                </div>
                
                <!-- Project Metrics -->
                <div class="d-flex justify-content-between align-items-center">
                    <div class="d-flex align-items-center gap-3">
                        <!-- Claps -->
                        <span class="text-muted" title="Claps">
                            <i class="bi bi-hand-thumbs-up"></i>
                            {{ project.claps }}
                        </span>
                        
                        <!-- Comments -->
                        <span class="text-muted" title="Comments">
                            <i class="bi bi-chat"></i>
                            {{ project.comment_count }}
                        </span>
                        
                        <!-- Average Rating -->
                        {% if project.rating_avg %}
                        <span class="text-muted" title="Average Rating">
                            <i class="bi bi-star-fill"></i>
                            {{ project.rating_avg|floatformat:1 }}
                        </span>
                        {% endif %}
                    </div>
                    
                    <!-- GitHub Link -->
                    <a href="{{ project.github_link }}" 
                       target="_blank" 
                       class="btn btn-sm btn-outline-dark">
                        <i class="bi bi-github"></i> View Code
                    </a>
                </div>
            </div>
        </div>
    </div>
    {% endfor %}
</div>

<!-- Pagination -->
{% if projects.has_other_pages %}
<nav aria-label="Search results pagination" class="my-4">
    <ul class="pagination justify-content-center">
        {% if projects.has_previous %}
        <li class="page-item">
            <a class="page-link" 
               href="?{{ request.GET.urlencode }}&page={{ projects.previous_page_number }}"
               hx-get="?{{ request.GET.urlencode }}&page={{ projects.previous_page_number }}"
               hx-target="#searchResults"
               hx-push-url="true">
                Previous
            </a>
        </li>
        {% endif %}
        
        {% for num in projects.paginator.page_range %}
            {% if projects.number == num %}
            <li class="page-item active">
                <span class="page-link">{{ num }}</span>
            </li>
            {% elif num > projects.number|add:'-3' and num < projects.number|add:'3' %}
            <li class="page-item">
                <a class="page-link" 
                   href="?{{ request.GET.urlencode }}&page={{ num }}"
                   hx-get="?{{ request.GET.urlencode }}&page={{ num }}"
                   hx-target="#searchResults"
                   hx-push-url="true">
                    {{ num }}
                </a>
            </li>
            {% endif %}
        {% endfor %}
        
        {% if projects.has_next %}
        <li class="page-item">
            <a class="page-link" 
               href="?{{ request.GET.urlencode }}&page={{ projects.next_page_number }}"
               hx-get="?{{ request.GET.urlencode }}&page={{ projects.next_page_number }}"
               hx-target="#searchResults"
               hx-push-url="true">
                Next
            </a>
        </li>
        {% endif %}
    </ul>
</nav>
{% endif %}

{% else %}
<!-- No Results -->
<div class="text-center py-5">
    <i class="bi bi-search display-1 text-muted mb-3"></i>
    <h3>No projects found</h3>
    <p class="text-muted mb-4">
        Try adjusting your search criteria or explore some suggestions below.
    </p>
    
    {% if popular_tags %}
    <div class="mb-4">
        <h5 class="mb-3">Popular Tags</h5>
        <div class="d-flex justify-content-center flex-wrap gap-2">
            {% for tag in popular_tags %}
            <a href="?tags={{ tag.name }}" 
               class="badge bg-light text-dark text-decoration-none">
                {{ tag.name }}
                <span class="text-muted">({{ tag.count }})</span>
            </a>
            {% endfor %}
        </div>
    </div>
    {% endif %}
    
    <a href="{% url 'project_list' %}" class="btn btn-primary">
        Browse All Projects
    </a>
</div>
{% endif %}
                    

# Contents from: .\templates\projects\social_sharing.html
{% block content %}
<!-- Add this where appropriate in your project_detail.html -->
<div class="social-share my-4">
    <h6 class="text-muted mb-3">Share this project</h6>
    <div class="d-flex gap-2">
        <!-- Twitter -->
        <a href="https://twitter.com/intent/tweet?text={{ project.title|urlencode }}&url={{ request.build_absolute_uri|urlencode }}"
           target="_blank"
           class="btn btn-outline-primary">
            <i class="bi bi-twitter"></i>
        </a>
        
        <!-- LinkedIn -->
        <a href="https://www.linkedin.com/shareArticle?mini=true&url={{ request.build_absolute_uri|urlencode }}&title={{ project.title|urlencode }}&summary={{ project.description|truncatewords:30|urlencode }}"
           target="_blank"
           class="btn btn-outline-primary">
            <i class="bi bi-linkedin"></i>
        </a>
        
        <!-- Facebook -->
        <a href="https://www.facebook.com/sharer/sharer.php?u={{ request.build_absolute_uri|urlencode }}"
           target="_blank"
           class="btn btn-outline-primary">
            <i class="bi bi-facebook"></i>
        </a>
        
        <!-- Copy Link -->
        <button class="btn btn-outline-primary copy-link" 
                data-url="{{ request.build_absolute_uri }}">
            <i class="bi bi-link-45deg"></i>
        </button>
    </div>
</div>

{% block extra_js %}
{{ block.super }}
<script>
$(document).ready(function() {
    $('.copy-link').click(function() {
        const url = $(this).data('url');
        navigator.clipboard.writeText(url).then(function() {
            // Show success toast
            const toast = new bootstrap.Toast($('#copy-toast'));
            toast.show();
        });
    });
});
</script>
{% endblock %}

# Contents from: .\templates\projects\submit_project.html
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block content %}
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h2 class="card-title mb-4">Share Your Project</h2>
                    
                    <form method="post" class="mb-4">
                        {% csrf_token %}
                        {{ form|crispy }}
                        
                        <!-- Preview Section -->
                        <div class="card mt-4">
                            <div class="card-header">
                                Preview
                            </div>
                            <div class="card-body">
                                <div class="preview-content">
                                    <h3 id="preview-title">Project title will appear here...</h3>
                                    <p id="preview-description" class="text-muted">Project description will appear here...</p>
                                    <div id="preview-tags" class="tag-cloud"></div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="d-grid gap-2 mt-4">
                            <button type="submit" class="btn btn-primary">
                                Submit Project
                            </button>
                            <a href="{% url 'projects:project_list' %}" class="btn btn-outline-secondary">
                                Cancel
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    // Live preview functionality
    document.addEventListener('DOMContentLoaded', function() {
        const titleInput = document.getElementById('id_title');
        const descInput = document.getElementById('id_description');
        const tagsInput = document.getElementById('id_tags');
        
        const previewTitle = document.getElementById('preview-title');
        const previewDesc = document.getElementById('preview-description');
        const previewTags = document.getElementById('preview-tags');
        
        function updatePreview() {
            previewTitle.textContent = titleInput.value || 'Project title will appear here...';
            previewDesc.textContent = descInput.value || 'Project description will appear here...';
            
            // Update tags
            const tags = tagsInput.value.split(',').map(tag => tag.trim()).filter(tag => tag);
            previewTags.innerHTML = tags.map(tag => 
                `<span class="badge bg-light text-dark me-1">${tag}</span>`
            ).join('');
        }
        
        titleInput.addEventListener('input', updatePreview);
        descInput.addEventListener('input', updatePreview);
        tagsInput.addEventListener('input', updatePreview);
    });
</script>
{% endblock %}

# Contents from: .\templates\projects\user_profile.html
{% extends 'base.html' %}
{% load static %}

{% block content %}
<div class="container py-5">
    <div class="row">
        <!-- Profile Info -->
        <div class="col-md-4">
            <div class="card shadow-sm">
                <div class="card-body text-center">
                    <img src="{% if profile_user.profile.avatar %}{{ profile_user.profile.avatar.url }}{% else %}https://ui-avatars.com/api/?name={{ profile_user.username }}{% endif %}" 
                         alt="{{ profile_user.username }}" 
                         class="rounded-circle mb-3" 
                         style="width: 150px; height: 150px; object-fit: cover;">
                    
                    <h4 class="card-title">{{ profile_user.username }}</h4>
                    {% if profile_user.profile.bio %}
                        <p class="text-muted">{{ profile_user.profile.bio }}</p>
                    {% endif %}
                    
                    <div class="d-flex justify-content-center gap-3 mb-3">
                        <div class="text-center">
                            <h6 class="mb-0">{{ profile_user.projects.count }}</h6>
                            <small class="text-muted">Projects</small>
                        </div>
                        <div class="text-center">
                            <h6 class="mb-0">{{ profile_user.followers.count }}</h6>
                            <small class="text-muted">Followers</small>
                        </div>
                        <div class="text-center">
                            <h6 class="mb-0">{{ profile_user.following.count }}</h6>
                            <small class="text-muted">Following</small>
                        </div>
                    </div>
                    
                    {% if user != profile_user %}
                        {% if user.is_authenticated %}
                            {% if is_following %}
                                <form action="{% url 'projects:unfollow_user' profile_user.username %}" method="post" class="d-inline">
                                    {% csrf_token %}
                                    <button type="submit" class="btn btn-outline-primary">Unfollow</button>
                                </form>
                            {% else %}
                                <form action="{% url 'projects:follow_user' profile_user.username %}" method="post" class="d-inline">
                                    {% csrf_token %}
                                    <button type="submit" class="btn btn-primary">Follow</button>
                                </form>
                            {% endif %}
                        {% endif %}
                    {% endif %}
                </div>
            </div>
        </div>
        
        <!-- Projects -->
        <div class="col-md-8">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h4 class="mb-0">Projects</h4>
                {% if user == profile_user %}
                    <a href="{% url 'projects:submit_project' %}" class="btn btn-primary btn-sm">
                        New Project
                    </a>
                {% endif %}
            </div>
            
            {% for project in projects %}
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-body">
                        <h5 class="card-title mb-3">
                            <a href="{% url 'projects:project_detail' project.pk %}" 
                               class="text-decoration-none text-dark">
                                {{ project.title }}
                            </a>
                        </h5>
                        
                        <p class="card-text text-muted">
                            {{ project.description|truncatewords:30 }}
                        </p>
                        
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="small text-muted">
                                <i class="bi bi-calendar"></i> {{ project.created_at|date:"M d, Y" }}
                                <i class="bi bi-hand-thumbs-up ms-3"></i> {{ project.claps }}
                                <i class="bi bi-chat ms-3"></i> {{ project.comments.count }}
                            </div>
                            <div>
                                {% for tag in project.tag_list %}
                                    <span class="badge bg-light text-dark">{{ tag }}</span>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                </div>
            {% empty %}
                <div class="text-center text-muted py-5">
                    <i class="bi bi-folder2-open display-4"></i>
                    <p class="mt-3">No projects yet</p>
                </div>
            {% endfor %}
        </div>
    </div>
</div>
{% endblock %}

# Contents from: .\templates\registration\login.html
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block content %}
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Sign In</h2>
                    <form method="post">
                        {% csrf_token %}
                        {{ form|crispy }}
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Sign In</button>
                        </div>
                        <div class="text-center mt-3">
                            <a href="{% url 'auth:password_reset' %}">Forgot Password?</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

# Contents from: .\templates\registration\register.html
{% extends 'base.html' %}
{% load crispy_forms_tags %}

{% block content %}
<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-body">
                    <h2 class="card-title text-center mb-4">Sign Up</h2>
                    <form method="post">
                        {% csrf_token %}
                        {{ form|crispy }}
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-primary">Sign Up</button>
                        </div>
                        <div class="text-center mt-3">
                            Already have an account? <a href="{% url 'login' %}">Sign In</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

# Contents from: .\static\js\search.js
// static/js/search.js

document.addEventListener('DOMContentLoaded', function() {
    // Initialize popovers
    const popoverTriggerList = [].slice.call(
        document.querySelectorAll('[data-bs-toggle="popover"]')
    );
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
    
    // Debounce function for search input
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }
    
    // Handle search input
    const searchInput = document.getElementById('id_query');
    if (searchInput) {
        const debouncedSearch = debounce(() => {
            document.getElementById('searchForm').requestSubmit();
        }, 500);
        
        searchInput.addEventListener('input', debouncedSearch);
    }
    
    // Handle tag clicks
    document.querySelectorAll('.tag-badge').forEach(tag => {
        tag.addEventListener('click', (e) => {
            e.preventDefault();
            const tagInput = document.getElementById('id_tags');
            const tagsinput = $(tagInput).tagsinput('items');
            const tagValue = e.target.dataset.tag;
            
            if (!tagsinput.includes(tagValue)) {
                $(tagInput).tagsinput('add', tagValue);
                document.getElementById('searchForm').requestSubmit();
            }
        });
    });
    
    // Handle sort changes
    const sortSelect = document.getElementById('id_sort_by');
    if (sortSelect) {
        sortSelect.addEventListener('change', () => {
            document.getElementById('searchForm').requestSubmit();
        });
    }
    
    // Initialize date range picker
    const dateFrom = document.getElementById('id_date_from');
    const dateTo = document.getElementById('id_date_to');
    
    if (dateFrom && dateTo) {
        dateFrom.addEventListener('change', () => {
            dateTo.min = dateFrom.value;
            document.getElementById('searchForm').requestSubmit();
        });
        
        dateTo.addEventListener('change', () => {
            dateFrom.max = dateTo.value;
            document.getElementById('searchForm').requestSubmit();
        });
    }
    
    // Handle filter reset
    document.getElementById('resetFilters')?.addEventListener('click', () => {
        const form = document.getElementById('searchForm');
        form.reset();
        $('#id_tags').tagsinput('removeAll');
        form.requestSubmit();
    });
    
    // Save search preferences
    function saveSearchPreferences() {
        const preferences = {
            sort_by: document.getElementById('id_sort_by').value,
            results_per_page: document.getElementById('id_results_per_page').value
        };
        localStorage.setItem('searchPreferences', JSON.stringify(preferences));
    }
    
    // Load search preferences
    function loadSearchPreferences() {
        const preferences = JSON.parse(
            localStorage.getItem('searchPreferences')
        );
        if (preferences) {
            document.getElementById('id_sort_by').value = 
                preferences.sort_by || '-created_at';
            document.getElementById('id_results_per_page').value = 
                preferences.results_per_page || '12';
        }
    }
    
    // Initialize preferences
    loadSearchPreferences();
    
    // Save preferences on change
    document.getElementById('id_sort_by')?.addEventListener('change', 
        saveSearchPreferences);
    document.getElementById('id_results_per_page')?.addEventListener('change', 
        saveSearchPreferences);
});

// HTMX after swap handling
document.body.addEventListener('htmx:afterSwap', function(evt) {
    // Reinitialize popovers after content update
    const popoverTriggerList = [].slice.call(
        document.querySelectorAll('[data-bs-toggle="popover"]')
    );
    popoverTriggerList.map(function (popoverTriggerEl) {
        return new bootstrap.Popover(popoverTriggerEl);
    });
    
    // Smooth scroll to top of results on page change
    if (evt.detail.target.id === 'searchResults') {
        evt.detail.target.scrollIntoView({ behavior: 'smooth' });
    }
});

# Contents from: .\accounts\__init__.py


# Contents from: .\accounts\admin.py
from django.contrib import admin

# Register your models here.


# Contents from: .\accounts\apps.py
from django.apps import AppConfig


class AccountsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "accounts"


# Contents from: .\accounts\migrations\__init__.py


# Contents from: .\accounts\models.py
from django.db import models

# Create your models here.


# Contents from: .\accounts\tests.py
from django.test import TestCase

# Create your tests here.


# Contents from: .\accounts\views.py
from django.contrib.auth.forms import UserCreationForm
from django.urls import reverse_lazy
from django.views.generic.edit import CreateView

class RegisterView(CreateView):
    form_class = UserCreationForm
    success_url = reverse_lazy('login')
    template_name = 'registration/register.html'


# Contents from: .\combine.py
import os

def get_files_recursively(directory, extensions):
    """
    Recursively get all files with specified extensions from directory and subdirectories.
    Uses os.walk() to traverse through all subdirectories at any depth.
    """
    file_list = []
    for root, dirs, files in os.walk(directory):
        for file in files:
            if any(file.endswith(ext) for ext in extensions):
                file_list.append(os.path.join(root, file))
    return file_list

def combine_files(output_file, file_list):
    """
    Combine contents of all files in file_list into output_file
    """
    with open(output_file, 'a', encoding='utf-8') as outfile:
        for fname in file_list:
            # Add a header comment to show which file's contents follow
            outfile.write(f"\n\n# Contents from: {fname}\n")
            try:
                with open(fname, 'r', encoding='utf-8') as infile:
                    for line in infile:
                        outfile.write(line)
            except Exception as e:
                outfile.write(f"# Error reading file {fname}: {str(e)}\n")

def main():
    # Define the base directory (current directory in this case)
    base_directory = "."
    output_file = 'combined.txt'
    extensions = ('.py', '.html', '.js', '.css')

    # Remove output file if it exists
    if os.path.exists(output_file):
        try:
            os.remove(output_file)
        except Exception as e:
            print(f"Error removing existing {output_file}: {str(e)}")
            return

    # Get all files recursively - os.walk() will traverse through all subdirectories
    all_files = get_files_recursively(base_directory, extensions)
    
    # Sort files by extension and then by name
    all_files.sort(key=lambda x: (os.path.splitext(x)[1], x))

    # Add a header to the output file
    with open(output_file, 'w', encoding='utf-8') as outfile:
        outfile.write("# Combined Python and HTML files\n")
        outfile.write(f"# Generated from directory: {os.path.abspath(base_directory)}\n")
        outfile.write(f"# Total files found: {len(all_files)}\n\n")

    # Combine all files
    combine_files(output_file, all_files)
    
    print(f"Successfully combined {len(all_files)} files into {output_file}")
    print("Files processed:")
    for file in all_files:
        print(f"  - {file}")

if __name__ == "__main__":
    main()

# Contents from: .\khcc_psut_ai_lab\__init__.py


# Contents from: .\khcc_psut_ai_lab\asgi.py
"""
ASGI config for khcc_psut_ai_lab project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "khcc_psut_ai_lab.settings")

application = get_asgi_application()


# Contents from: .\khcc_psut_ai_lab\settings.py
# khcc_psut_ai_lab/settings.py

from pathlib import Path
import os
from django.contrib.messages import constants as messages

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-b3(9-x8ohz16r#18d&b^sr&49e=@c6107rcyfq!h!4%7n=b@#!"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Site specific settings
SITE_NAME = 'KHCC_PSUT AI Lab'
SITE_URL = 'http://localhost:8000'  # Change this in production
ADMIN_EMAIL = 'admin@khccpsutailab.com'

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    
    'projects.apps.ProjectsConfig',
    'accounts.apps.AccountsConfig',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_bootstrap5',
]

# Crispy Forms Settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Message tags
MESSAGE_TAGS = {
    messages.DEBUG: 'alert-secondary',
    messages.INFO: 'alert-info',
    messages.SUCCESS: 'alert-success',
    messages.WARNING: 'alert-warning',
    messages.ERROR: 'alert-danger',
}

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Change based on your email provider
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', 'your-email@gmail.com')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', 'your-app-specific-password')
DEFAULT_FROM_EMAIL = f'{SITE_NAME} <{EMAIL_HOST_USER}>'

# For development, you can use console email backend
if DEBUG:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# django-allauth settings
SITE_ID = 1
LOGIN_URL = 'account_login'
LOGIN_REDIRECT_URL = 'projects:project_list'
LOGOUT_REDIRECT_URL = 'account_login'
ACCOUNT_LOGOUT_REDIRECT_URL = 'home'
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # Options: 'none', 'optional', 'mandatory'
ACCOUNT_SIGNUP_PASSWORD_ENTER_TWICE = True
ACCOUNT_USERNAME_MIN_LENGTH = 4
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 7
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = 5
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = 300
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
ACCOUNT_PRESERVE_USERNAME_CASING = False
ACCOUNT_USERNAME_BLACKLIST = ['admin', 'administrator', 'staff', 'support']

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

ROOT_URLCONF = "khcc_psut_ai_lab.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates', 'allauth'),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "projects.context_processors.site_context",  # Custom context processor
            ],
        },
    },
]

WSGI_APPLICATION = "khcc_psut_ai_lab.wsgi.application"

# Database
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        "OPTIONS": {
            "min_length": 8,
        }
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# GitHub OAuth settings
SOCIALACCOUNT_PROVIDERS = {
    'github': {
        'APP': {
            'client_id': os.environ.get('GITHUB_CLIENT_ID', 'your-github-client-id'),
            'secret': os.environ.get('GITHUB_CLIENT_SECRET', 'your-github-client-secret'),
            'key': ''
        },
        'SCOPE': [
            'read:user',
            'user:email',
        ],
    }
}

# Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'unique-snowflake',
    }
}

# File upload settings
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Session settings
SESSION_COOKIE_AGE = 1209600  # 2 weeks
SESSION_COOKIE_SECURE = not DEBUG

# Security settings
if not DEBUG:
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

# Custom settings for the project
PROJECT_CLAP_COOLDOWN = 300  # 5 minutes between claps
MAX_TAGS_PER_PROJECT = 5
MAX_PROJECTS_PER_PAGE = 12
COMMENT_MAX_LENGTH = 1000
PROJECT_DESCRIPTION_MAX_LENGTH = 5000

# Contents from: .\khcc_psut_ai_lab\urls.py
from django.contrib import admin
from django.urls import path, include
from django.contrib.auth import views as auth_views
from accounts.views import RegisterView

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('projects.urls')),
    
    # Authentication URLs
    path('login/', auth_views.LoginView.as_view(template_name='registration/login.html'), name='login'),
    path('logout/', auth_views.LogoutView.as_view(next_page='/'), name='logout'),
    path('register/', RegisterView.as_view(), name='register'),
    path('password_change/', auth_views.PasswordChangeView.as_view(), name='password_change'),
    path('password_change/done/', auth_views.PasswordChangeDoneView.as_view(), name='password_change_done'),
    path('password_reset/', auth_views.PasswordResetView.as_view(), name='password_reset'),
    path('password_reset/done/', auth_views.PasswordResetDoneView.as_view(), name='password_reset_done'),
    path('reset/<uidb64>/<token>/', auth_views.PasswordResetConfirmView.as_view(), name='password_reset_confirm'),
    path('reset/done/', auth_views.PasswordResetCompleteView.as_view(), name='password_reset_complete'),
    path('accounts/', include('allauth.urls')),
]


# Contents from: .\khcc_psut_ai_lab\wsgi.py
"""
WSGI config for khcc_psut_ai_lab project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "khcc_psut_ai_lab.settings")

application = get_wsgi_application()


# Contents from: .\manage.py
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "khcc_psut_ai_lab.settings")
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == "__main__":
    main()


# Contents from: .\projects\__init__.py


# Contents from: .\projects\admin.py
# projects/admin.py

from django.contrib import admin
from django.utils.html import format_html
from django.urls import reverse
from django.db.models import Count
from django.utils.safestring import mark_safe
from .models import (
    Project, Comment, Clap, UserProfile, Rating,
    Bookmark, ProjectAnalytics, Notification
)

@admin.register(Project)
class ProjectAdmin(admin.ModelAdmin):
    list_display = [
        'title', 'author_link', 'created_at', 'claps_count',
        'comments_count', 'ratings_count', 'github_link_display'
    ]
    list_filter = ['created_at', 'author', 'tags']
    search_fields = ['title', 'description', 'author__username', 'tags']
    readonly_fields = ['created_at', 'updated_at', 'slug', 'claps']
    date_hierarchy = 'created_at'
    
    fieldsets = (
        ('Project Information', {
            'fields': ('title', 'slug', 'description', 'github_link', 'tags')
        }),
        ('Author Information', {
            'fields': ('author',)
        }),
        ('Metrics', {
            'fields': ('claps',)
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def author_link(self, obj):
        url = reverse('admin:auth_user_change', args=[obj.author.id])
        return format_html('<a href="{}">{}</a>', url, obj.author.username)
    author_link.short_description = 'Author'
    
    def claps_count(self, obj):
        return obj.claps
    claps_count.short_description = 'Claps'
    
    def comments_count(self, obj):
        count = obj.comments.count()
        url = reverse('admin:projects_comment_changelist')
        return format_html('<a href="{}?project__id={}">{}</a>', url, obj.id, count)
    comments_count.short_description = 'Comments'
    
    def ratings_count(self, obj):
        count = obj.ratings.count()
        url = reverse('admin:projects_rating_changelist')
        return format_html('<a href="{}?project__id={}">{}</a>', url, obj.id, count)
    ratings_count.short_description = 'Ratings'
    
    def github_link_display(self, obj):
        return format_html('<a href="{}" target="_blank">{}</a>', 
                         obj.github_link, obj.github_link)
    github_link_display.short_description = 'GitHub Repository'

@admin.register(Comment)
class CommentAdmin(admin.ModelAdmin):
    list_display = [
        'user_link', 'project_link', 'parent_comment',
        'created_at', 'content_preview', 'has_replies'
    ]
    list_filter = ['created_at', 'user', 'project']
    search_fields = ['content', 'user__username', 'project__title']
    readonly_fields = ['created_at', 'updated_at']
    date_hierarchy = 'created_at'
    
    def user_link(self, obj):
        url = reverse('admin:auth_user_change', args=[obj.user.id])
        return format_html('<a href="{}">{}</a>', url, obj.user.username)
    user_link.short_description = 'User'
    
    def project_link(self, obj):
        url = reverse('admin:projects_project_change', args=[obj.project.id])
        return format_html('<a href="{}">{}</a>', url, obj.project.title)
    project_link.short_description = 'Project'
    
    def parent_comment(self, obj):
        if obj.parent:
            return format_html('Reply to: {}', obj.parent.content[:50])
        return '-'
    parent_comment.short_description = 'Parent Comment'
    
    def content_preview(self, obj):
        return obj.content[:100] + '...' if len(obj.content) > 100 else obj.content
    content_preview.short_description = 'Content'
    
    def has_replies(self, obj):
        count = obj.replies.count()
        if count:
            url = reverse('admin:projects_comment_changelist')
            return format_html('<a href="{}?parent__id={}">{} replies</a>', 
                             url, obj.id, count)
        return 'No replies'
    has_replies.short_description = 'Replies'

@admin.register(UserProfile)
class UserProfileAdmin(admin.ModelAdmin):
    list_display = [
        'user_link', 'location', 'github_username',
        'project_count', 'total_claps_received', 'avatar_preview'
    ]
    list_filter = ['location', 'created_at']
    search_fields = ['user__username', 'bio', 'location', 'github_username']
    readonly_fields = [
        'created_at', 'updated_at', 'avatar_preview',
        'project_count', 'total_claps_received'
    ]
    
    fieldsets = (
        ('User Information', {
            'fields': ('user', 'avatar', 'avatar_preview', 'bio')
        }),
        ('Contact Information', {
            'fields': ('location', 'website')
        }),
        ('Social Links', {
            'fields': ('github_username', 'linkedin_url')
        }),
        ('Statistics', {
            'fields': ('project_count', 'total_claps_received'),
            'classes': ('collapse',)
        }),
        ('Timestamps', {
            'fields': ('created_at', 'updated_at'),
            'classes': ('collapse',)
        }),
    )
    
    def user_link(self, obj):
        url = reverse('admin:auth_user_change', args=[obj.user.id])
        return format_html('<a href="{}">{}</a>', url, obj.user.username)
    user_link.short_description = 'User'
    
    def avatar_preview(self, obj):
        if obj.avatar:
            return format_html(
                '<img src="{}" style="max-width: 100px; max-height: 100px;" />',
                obj.avatar.url
            )
        return 'No avatar'
    avatar_preview.short_description = 'Avatar Preview'

@admin.register(Notification)
class NotificationAdmin(admin.ModelAdmin):
    list_display = [
        'recipient_link', 'sender_link', 'notification_type',
        'is_read', 'created_at', 'message_preview'
    ]
    list_filter = ['notification_type', 'is_read', 'created_at']
    search_fields = [
        'recipient__username', 'sender__username',
        'message', 'project__title'
    ]
    readonly_fields = ['created_at']
    actions = ['mark_as_read', 'mark_as_unread']
    
    def recipient_link(self, obj):
        url = reverse('admin:auth_user_change', args=[obj.recipient.id])
        return format_html('<a href="{}">{}</a>', url, obj.recipient.username)
    recipient_link.short_description = 'Recipient'
    
    def sender_link(self, obj):
        url = reverse('admin:auth_user_change', args=[obj.sender.id])
        return format_html('<a href="{}">{}</a>', url, obj.sender.username)
    sender_link.short_description = 'Sender'
    
    def message_preview(self, obj):
        return obj.message[:100] + '...' if len(obj.message) > 100 else obj.message
    message_preview.short_description = 'Message'
    
    def mark_as_read(self, request, queryset):
        queryset.update(is_read=True)
    mark_as_read.short_description = "Mark selected notifications as read"
    
    def mark_as_unread(self, request, queryset):
        queryset.update(is_read=False)
    mark_as_unread.short_description = "Mark selected notifications as unread"

@admin.register(ProjectAnalytics)
class ProjectAnalyticsAdmin(admin.ModelAdmin):
    list_display = [
        'project_link', 'view_count', 'unique_visitors',
        'github_clicks', 'last_updated'
    ]
    list_filter = ['last_updated']
    readonly_fields = [
        'view_count', 'unique_visitors', 'github_clicks',
        'avg_time_spent', 'direct_traffic', 'social_traffic',
        'search_traffic', 'referral_traffic', 'desktop_visits',
        'mobile_visits', 'tablet_visits', 'chrome_visits',
        'firefox_visits', 'safari_visits', 'edge_visits',
        'other_browsers', 'unique_visitors_weekly',
        'unique_visitors_monthly', 'github_clicks_weekly',
        'github_clicks_monthly', 'last_updated'
    ]
    
    fieldsets = (
        ('Project Information', {
            'fields': ('project',)
        }),
        ('Basic Metrics', {
            'fields': (
                'view_count', 'unique_visitors',
                'github_clicks', 'avg_time_spent'
            )
        }),
        ('Traffic Sources', {
            'fields': (
                'direct_traffic', 'social_traffic',
                'search_traffic', 'referral_traffic'
            ),
            'classes': ('collapse',)
        }),
        ('Device Statistics', {
            'fields': (
                'desktop_visits', 'mobile_visits',
                'tablet_visits'
            ),
            'classes': ('collapse',)
        }),
        ('Browser Statistics', {
            'fields': (
                'chrome_visits', 'firefox_visits',
                'safari_visits', 'edge_visits',
                'other_browsers'
            ),
            'classes': ('collapse',)
        }),
        ('Time-based Metrics', {
            'fields': (
                'unique_visitors_weekly',
                'unique_visitors_monthly',
                'github_clicks_weekly',
                'github_clicks_monthly'
            ),
            'classes': ('collapse',)
        })
    )
    
    def project_link(self, obj):
        url = reverse('admin:projects_project_change', args=[obj.project.id])
        return format_html('<a href="{}">{}</a>', url, obj.project.title)
    project_link.short_description = 'Project'

class CustomAdminSite(admin.AdminSite):
    site_header = 'KHCC_PSUT AI Lab Administration'
    site_title = 'KHCC_PSUT AI Lab Admin'
    index_title = 'Dashboard'
    
    def get_app_list(self, request):
        app_list = super().get_app_list(request)
        
        # Add custom statistics to the admin index
        app_list.append({
            'name': 'Statistics',
            'app_label': 'statistics',
            'models': [
                {
                    'name': 'Total Projects',
                    'object_name': 'projects',
                    'count': Project.objects.count(),
                    'admin_url': reverse('admin:projects_project_changelist'),
                },
                {
                    'name': 'Total Users',
                    'object_name': 'users',
                    'count': UserProfile.objects.count(),
                    'admin_url': reverse('admin:auth_user_changelist'),
                },
                {
                    'name': 'Total Comments',
                    'object_name': 'comments',
                    'count': Comment.objects.count(),
                    'admin_url': reverse('admin:projects_comment_changelist'),
                },
                {
                    'name': 'Total Claps',
                    'object_name': 'claps',
                    'count': Clap.objects.count(),
                    'admin_url': '#',
                },
            ]
        })
        
        return app_list

# Register the custom admin site
admin_site = CustomAdminSite(name='admin')
admin_site.register(Project, ProjectAdmin)
admin_site.register(Comment, CommentAdmin)
admin_site.register(UserProfile, UserProfileAdmin)
admin_site.register(Notification, NotificationAdmin)
admin_site.register(ProjectAnalytics, ProjectAnalyticsAdmin)

# Contents from: .\projects\apps.py
from django.apps import AppConfig


class ProjectsConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "projects"


# Contents from: .\projects\context_processors.py
# projects/context_processors.py

from django.conf import settings
from .models import Project, UserProfile

def site_context(request):
    """
    Add common context variables to all templates
    """
    context = {
        'site_name': settings.SITE_NAME,
        'site_url': settings.SITE_URL,
    }
    
    if request.user.is_authenticated:
        # Get unread notifications count
        context['unread_notifications_count'] = request.user.notifications.filter(
            is_read=False
        ).count()
        
        # Get user's bookmarked projects
        context['bookmarked_projects'] = Project.objects.filter(
            bookmarks__user=request.user
        ).values_list('id', flat=True)
        
        # Check if user has completed their profile
        try:
            profile = request.user.profile
            context['profile_completed'] = all([
                profile.bio,
                profile.location,
                profile.avatar
            ])
        except UserProfile.DoesNotExist:
            context['profile_completed'] = False
    
    return context

# Contents from: .\projects\filters\__init__.py
from .project_filters import ProjectFilter

__all__ = ['ProjectFilter']


# Contents from: .\projects\filters\project_filters.py
import django_filters
from django.db.models import Q
from ..models import Project

class ProjectFilter(django_filters.FilterSet):
    """FilterSet for advanced project filtering"""
    query = django_filters.CharFilter(method='filter_query')
    tags = django_filters.CharFilter(method='filter_tags')
    date_from = django_filters.DateFilter(field_name='created_at', lookup_expr='gte')
    date_to = django_filters.DateFilter(field_name='created_at', lookup_expr='lte')
    min_claps = django_filters.NumberFilter(field_name='claps', lookup_expr='gte')
    has_github = django_filters.BooleanFilter(method='filter_has_github')
    
    class Meta:
        model = Project
        fields = ['query', 'tags', 'date_from', 'date_to', 'min_claps', 'has_github']
    
    def filter_query(self, queryset, name, value):
        if not value:
            return queryset
        
        return queryset.filter(
            Q(title__icontains=value) |
            Q(description__icontains=value) |
            Q(author__username__icontains=value) |
            Q(tags__icontains=value)
        )
    
    def filter_tags(self, queryset, name, value):
        if not value:
            return queryset
        
        tags = [tag.strip().lower() for tag in value.split(',') if tag.strip()]
        for tag in tags:
            queryset = queryset.filter(tags__icontains=tag)
        return queryset
    
    def filter_has_github(self, queryset, name, value):
        if value:
            return queryset.exclude(github_link='')
        return queryset

# Contents from: .\projects\forms.py
# projects/forms.py

from django import forms
from django.core.validators import URLValidator
from django.core.exceptions import ValidationError
from django.db.models import Avg, Count, Q
from .models import (
    Project,
    Comment,
    UserProfile,
    Rating,
    Bookmark,
    ProjectAnalytics,
    Notification
)

class ProjectForm(forms.ModelForm):
    """
    Form for creating and editing projects.
    Includes validation for GitHub links and tag formatting.
    """
    tags = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Enter tags separated by commas (e.g., AI, Machine Learning, NLP)',
            'data-toggle': 'tooltip',
            'title': 'Add up to 5 tags to help others find your project'
        })
    )
    
    class Meta:
        model = Project
        fields = ['title', 'description', 'github_link', 'tags']
        widgets = {
            'title': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Enter project title',
                'maxlength': '200',
                'data-toggle': 'tooltip',
                'title': 'Choose a descriptive title for your project'
            }),
            'description': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 5,
                'placeholder': 'Describe your project in detail...',
                'data-toggle': 'tooltip',
                'title': 'Explain what your project does, technologies used, and its purpose'
            }),
            'github_link': forms.URLInput(attrs={
                'class': 'form-control',
                'placeholder': 'https://github.com/username/repository',
                'data-toggle': 'tooltip',
                'title': 'Link to your GitHub repository'
            })
        }

    def clean_github_link(self):
        """Validate GitHub repository URL"""
        url = self.cleaned_data['github_link']
        if not url.startswith(('https://github.com/', 'http://github.com/')):
            raise ValidationError('Please enter a valid GitHub repository URL')
        
        # Additional validation to ensure URL format
        try:
            URLValidator()(url)
        except ValidationError:
            raise ValidationError('Please enter a valid URL')
        
        return url

    def clean_tags(self):
        """Validate and format tags"""
        tags = self.cleaned_data['tags']
        if not tags:
            return ''
        
        # Clean and validate tags
        tag_list = [tag.strip().lower() for tag in tags.split(',') if tag.strip()]
        
        # Remove duplicates while preserving order
        seen = set()
        unique_tags = [x for x in tag_list if not (x in seen or seen.add(x))]
        
        if len(unique_tags) > 5:
            raise ValidationError('Please enter no more than 5 unique tags')
        
        if any(len(tag) > 20 for tag in unique_tags):
            raise ValidationError('Each tag must be less than 20 characters')
        
        return ', '.join(unique_tags)

class CommentForm(forms.ModelForm):
    """
    Form for adding comments to projects.
    Includes validation for minimum content length.
    """
    class Meta:
        model = Comment
        fields = ['content']
        widgets = {
            'content': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 3,
                'placeholder': 'Write your comment here...',
                'data-toggle': 'tooltip',
                'title': 'Share your thoughts, feedback, or questions'
            })
        }
    
    def clean_content(self):
        """Validate comment content"""
        content = self.cleaned_data['content'].strip()
        if len(content) < 10:
            raise ValidationError('Comment must be at least 10 characters long')
        if len(content) > 1000:
            raise ValidationError('Comment must be less than 1000 characters')
        return content

class UserProfileForm(forms.ModelForm):
    """
    Form for user profile management.
    Includes validation for social links and avatar uploads.
    """
    class Meta:
        model = UserProfile
        fields = ['bio', 'location', 'website', 'github_username', 'linkedin_url', 'avatar']
        widgets = {
            'bio': forms.Textarea(attrs={
                'class': 'form-control',
                'rows': 4,
                'placeholder': 'Tell us about yourself...',
                'maxlength': '500'
            }),
            'location': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Where are you based?',
                'maxlength': '100'
            }),
            'website': forms.URLInput(attrs={
                'class': 'form-control',
                'placeholder': 'https://yourwebsite.com'
            }),
            'github_username': forms.TextInput(attrs={
                'class': 'form-control',
                'placeholder': 'Your GitHub username',
                'maxlength': '39'  # GitHub's max username length
            }),
            'linkedin_url': forms.URLInput(attrs={
                'class': 'form-control',
                'placeholder': 'https://www.linkedin.com/in/your-profile'
            }),
            'avatar': forms.FileInput(attrs={
                'class': 'form-control',
                'accept': 'image/*'
            })
        }

    def clean_avatar(self):
        """Validate avatar file size and type"""
        avatar = self.cleaned_data.get('avatar')
        if avatar:
            if avatar.size > 5 * 1024 * 1024:  # 5MB limit
                raise ValidationError('Avatar file size must be less than 5MB')
            if not avatar.content_type.startswith('image/'):
                raise ValidationError('Please upload a valid image file')
        return avatar

    def clean_website(self):
        """Validate website URL"""
        website = self.cleaned_data.get('website')
        if website:
            try:
                URLValidator()(website)
            except ValidationError:
                raise ValidationError('Please enter a valid URL')
        return website

class RatingForm(forms.ModelForm):
    """
    Form for rating projects.
    Includes validation for score and optional review.
    """
    class Meta:
        model = Rating
        fields = ['score', 'review']
        widgets = {
            'score': forms.Select(
                attrs={
                    'class': 'form-select',
                    'aria-label': 'Rating score'
                }
            ),
            'review': forms.Textarea(
                attrs={
                    'class': 'form-control',
                    'rows': 3,
                    'placeholder': 'Share your experience with this project (optional)',
                    'maxlength': 500
                }
            )
        }

    def clean_review(self):
        """Validate review content"""
        review = self.cleaned_data.get('review', '').strip()
        if len(review) > 500:
            raise ValidationError('Review must be less than 500 characters')
        return review

class BookmarkForm(forms.ModelForm):
    """Form for creating and managing bookmarks"""
    class Meta:
        model = Bookmark
        fields = ['project']  # Only include fields that exist in your Bookmark model
        widgets = {
            'project': forms.HiddenInput()  # Usually the project is set automatically
        }

    def clean(self):
        cleaned_data = super().clean()
        # Add any custom validation if needed
        return cleaned_data

class ProjectSearchForm(forms.Form):
    """
    Form for project search and filtering functionality.
    """
    query = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Search projects...',
            'aria-label': 'Search'
        })
    )
    
    tags = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Filter by tags (comma separated)',
            'aria-label': 'Tags'
        })
    )
    
    SORT_CHOICES = [
        ('-created_at', 'Newest first'),
        ('created_at', 'Oldest first'),
        ('-claps', 'Most popular'),
        ('title', 'Alphabetical'),
    ]
    
    sort = forms.ChoiceField(
        required=False,
        initial='-created_at',
        choices=SORT_CHOICES,
        widget=forms.Select(attrs={
            'class': 'form-select',
            'aria-label': 'Sort projects'
        })
    )

    def clean_tags(self):
        tags = self.cleaned_data.get('tags', '')
        if tags:
            return [tag.strip().lower() for tag in tags.split(',') if tag.strip()]
        return []
    
# projects/forms.py (add to existing file)

class AdvancedSearchForm(forms.Form):
    """Advanced search form with multiple filters"""
    query = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Search by title, description, or author',
            'aria-label': 'Search'
        })
    )
    
    tags = forms.CharField(
        required=False,
        widget=forms.TextInput(attrs={
            'class': 'form-control',
            'placeholder': 'Filter by tags (comma separated)',
            'aria-label': 'Tags',
            'data-role': 'tagsinput'
        })
    )
    
    date_from = forms.DateField(
        required=False,
        widget=forms.DateInput(attrs={
            'class': 'form-control',
            'type': 'date',
            'aria-label': 'Date From'
        })
    )
    
    date_to = forms.DateField(
        required=False,
        widget=forms.DateInput(attrs={
            'class': 'form-control',
            'type': 'date',
            'aria-label': 'Date To'
        })
    )
    
    min_claps = forms.IntegerField(
        required=False,
        min_value=0,
        widget=forms.NumberInput(attrs={
            'class': 'form-control',
            'placeholder': 'Minimum claps',
            'aria-label': 'Minimum Claps'
        })
    )
    
    has_github = forms.BooleanField(
        required=False,
        initial=False,
        widget=forms.CheckboxInput(attrs={
            'class': 'form-check-input',
            'aria-label': 'Has GitHub'
        })
    )
    
    sort_by = forms.ChoiceField(
        required=False,
        choices=[
            ('-created_at', 'Newest first'),
            ('created_at', 'Oldest first'),
            ('-claps', 'Most popular'),
            ('-comment_count', 'Most discussed'),
            ('title', 'Alphabetical'),
            ('-rating_avg', 'Highest rated')
        ],
        widget=forms.Select(attrs={
            'class': 'form-select',
            'aria-label': 'Sort by'
        })
    )
    
    def clean(self):
        cleaned_data = super().clean()
        date_from = cleaned_data.get('date_from')
        date_to = cleaned_data.get('date_to')
        
        if date_from and date_to and date_from > date_to:
            raise forms.ValidationError(
                "End date should be greater than start date"
            )
        
        return cleaned_data

# projects/filters.py

import django_filters
from django.db.models import Avg, Count, Q
from .models import Project

class ProjectFilter(django_filters.FilterSet):
    """FilterSet for advanced project filtering"""
    query = django_filters.CharFilter(method='filter_query')
    tags = django_filters.CharFilter(method='filter_tags')
    date_from = django_filters.DateFilter(field_name='created_at', lookup_expr='gte')
    date_to = django_filters.DateFilter(field_name='created_at', lookup_expr='lte')
    min_claps = django_filters.NumberFilter(field_name='claps', lookup_expr='gte')
    has_github = django_filters.BooleanFilter(method='filter_has_github')
    
    class Meta:
        model = Project
        fields = ['query', 'tags', 'date_from', 'date_to', 'min_claps', 'has_github']
    
    def filter_query(self, queryset, name, value):
        if not value:
            return queryset
        
        return queryset.filter(
            Q(title__icontains=value) |
            Q(description__icontains=value) |
            Q(author__username__icontains=value) |
            Q(tags__icontains=value)
        )
    
    def filter_tags(self, queryset, name, value):
        if not value:
            return queryset
        
        tags = [tag.strip().lower() for tag in value.split(',') if tag.strip()]
        for tag in tags:
            queryset = queryset.filter(tags__icontains=tag)
        return queryset
    
    def filter_has_github(self, queryset, name, value):
        if value:
            return queryset.exclude(github_link='')
        return queryset

# Now let's update the views.py to use these filters:

def search_projects(request):
    """Advanced search view"""
    form = AdvancedSearchForm(request.GET)
    projects = Project.objects.all()
    
    if form.is_valid():
        # Apply filters using ProjectFilter
        project_filter = ProjectFilter(request.GET, queryset=projects)
        projects = project_filter.qs
        
        # Apply sorting
        sort_by = form.cleaned_data.get('sort_by')
        if sort_by:
            if sort_by == '-rating_avg':
                # Annotate with average rating
                projects = projects.annotate(
                    rating_avg=Avg('ratings__score')
                ).order_by('-rating_avg')
            elif sort_by == '-comment_count':
                # Annotate with comment count
                projects = projects.annotate(
                    comment_count=Count('comments')
                ).order_by('-comment_count')
            else:
                projects = projects.order_by(sort_by)
    
    # Annotate with additional metrics for display
    projects = projects.annotate(
        comment_count=Count('comments'),
        rating_avg=Avg('ratings__score')
    )
    
    # Pagination
    paginator = Paginator(projects, settings.MAX_PROJECTS_PER_PAGE)
    page = request.GET.get('page')
    try:
        projects = paginator.page(page)
    except PageNotAnInteger:
        projects = paginator.page(1)
    except EmptyPage:
        projects = paginator.page(paginator.num_pages)
    
    context = {
        'form': form,
        'projects': projects,
        'popular_tags': get_popular_tags(),
        'total_results': paginator.count,
    }
    
    if request.headers.get('HX-Request'):
        # Return partial template for HTMX requests
        return render(request, 'projects/includes/project_list_results.html', context)
    
    return render(request, 'projects/search.html', context)

# Contents from: .\projects\migrations\0001_initial.py
# Generated by Django 5.1.3 on 2024-11-17 21:54

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Project",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("github_link", models.URLField()),
                ("tags", models.CharField(blank=True, max_length=100)),
                ("claps", models.IntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("content", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="projects.comment",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="projects.project",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Clap",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("clapped_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="claps_set",
                        to="projects.project",
                    ),
                ),
            ],
        ),
    ]


# Contents from: .\projects\migrations\0002_alter_comment_options_alter_project_options_and_more.py
# Generated by Django 5.1.3 on 2024-11-17 22:18

import django.core.validators
import projects.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("projects", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="comment",
            options={"ordering": ["created_at"]},
        ),
        migrations.AlterModelOptions(
            name="project",
            options={"ordering": ["-created_at"]},
        ),
        migrations.AddField(
            model_name="comment",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AddField(
            model_name="project",
            name="slug",
            field=models.SlugField(blank=True, unique=True),
        ),
        migrations.AddField(
            model_name="project",
            name="updated_at",
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name="project",
            name="github_link",
            field=models.URLField(
                validators=[
                    django.core.validators.URLValidator(),
                    projects.models.validate_github_url,
                ]
            ),
        ),
        migrations.AlterField(
            model_name="project",
            name="tags",
            field=models.CharField(
                blank=True, help_text="Enter tags separated by commas", max_length=100
            ),
        ),
        migrations.AlterUniqueTogether(
            name="clap",
            unique_together={("project", "user")},
        ),
    ]


# Contents from: .\projects\migrations\0003_userprofile.py
# Generated by Django 5.1.3 on 2024-11-17 22:31

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("projects", "0002_alter_comment_options_alter_project_options_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("bio", models.TextField(blank=True, max_length=500)),
                ("location", models.CharField(blank=True, max_length=100)),
                ("github_username", models.CharField(blank=True, max_length=100)),
                ("linkedin_url", models.URLField(blank=True)),
                (
                    "avatar",
                    models.ImageField(blank=True, null=True, upload_to="avatars/"),
                ),
                ("website", models.URLField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
    ]


# Contents from: .\projects\migrations\0004_notification.py
# Generated by Django 5.1.3 on 2024-11-17 22:53

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("projects", "0003_userprofile"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "notification_type",
                    models.CharField(
                        choices=[
                            ("clap", "Clap"),
                            ("comment", "Comment"),
                            ("reply", "Reply"),
                            ("mention", "Mention"),
                            ("follow", "Follow"),
                        ],
                        max_length=20,
                    ),
                ),
                ("message", models.TextField()),
                ("is_read", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "comment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="projects.comment",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="projects.project",
                    ),
                ),
                (
                    "recipient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "sender",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_notifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
    ]


# Contents from: .\projects\migrations\0005_remove_notification_comment_and_more.py
# Generated by Django 5.1.3 on 2024-11-17 23:06

import datetime
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("projects", "0004_notification"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RemoveField(
            model_name="notification",
            name="comment",
        ),
        migrations.AlterField(
            model_name="notification",
            name="notification_type",
            field=models.CharField(
                choices=[
                    ("clap", "Clap"),
                    ("comment", "Comment"),
                    ("reply", "Reply"),
                    ("mention", "Mention"),
                    ("follow", "Follow"),
                    ("rating", "Rating"),
                    ("bookmark", "Bookmark"),
                ],
                max_length=20,
            ),
        ),
        migrations.CreateModel(
            name="ProjectAnalytics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("view_count", models.PositiveIntegerField(default=0)),
                ("unique_visitors", models.PositiveIntegerField(default=0)),
                ("github_clicks", models.PositiveIntegerField(default=0)),
                ("avg_time_spent", models.DurationField(default=datetime.timedelta)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("direct_traffic", models.PositiveIntegerField(default=0)),
                ("social_traffic", models.PositiveIntegerField(default=0)),
                ("search_traffic", models.PositiveIntegerField(default=0)),
                ("referral_traffic", models.PositiveIntegerField(default=0)),
                ("desktop_visits", models.PositiveIntegerField(default=0)),
                ("mobile_visits", models.PositiveIntegerField(default=0)),
                ("tablet_visits", models.PositiveIntegerField(default=0)),
                ("chrome_visits", models.PositiveIntegerField(default=0)),
                ("firefox_visits", models.PositiveIntegerField(default=0)),
                ("safari_visits", models.PositiveIntegerField(default=0)),
                ("edge_visits", models.PositiveIntegerField(default=0)),
                ("other_browsers", models.PositiveIntegerField(default=0)),
                ("unique_visitors_weekly", models.PositiveIntegerField(default=0)),
                ("unique_visitors_monthly", models.PositiveIntegerField(default=0)),
                ("github_clicks_weekly", models.PositiveIntegerField(default=0)),
                ("github_clicks_monthly", models.PositiveIntegerField(default=0)),
                (
                    "project",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics",
                        to="projects.project",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Project analytics",
            },
        ),
        migrations.CreateModel(
            name="Bookmark",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Add private notes about this project"
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookmarks",
                        to="projects.project",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bookmarks",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("user", "project")},
            },
        ),
        migrations.CreateModel(
            name="Rating",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "score",
                    models.IntegerField(
                        choices=[
                            (1, "1 - Poor"),
                            (2, "2 - Fair"),
                            (3, "3 - Good"),
                            (4, "4 - Very Good"),
                            (5, "5 - Excellent"),
                        ]
                    ),
                ),
                ("review", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "project",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ratings",
                        to="projects.project",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "unique_together": {("project", "user")},
            },
        ),
    ]


# Contents from: .\projects\migrations\0006_alter_bookmark_options_remove_bookmark_notes.py
# Generated by Django 5.1.3 on 2024-11-17 23:40

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ("projects", "0005_remove_notification_comment_and_more"),
    ]

    operations = [
        migrations.AlterModelOptions(
            name="bookmark",
            options={"ordering": ["-created_at"]},
        ),
        migrations.RemoveField(
            model_name="bookmark",
            name="notes",
        ),
    ]


# Contents from: .\projects\migrations\__init__.py


# Contents from: .\projects\models.py
# projects/models.py

from django.db import models
from django.contrib.auth.models import User
from django.core.validators import URLValidator
from django.core.exceptions import ValidationError
from django.utils.text import slugify
from datetime import timedelta

def validate_github_url(value):
    if not value.startswith(('https://github.com/', 'http://github.com/')):
        raise ValidationError('URL must be a GitHub repository')

class Project(models.Model):
    title = models.CharField(max_length=200)
    slug = models.SlugField(unique=True, blank=True)
    description = models.TextField()
    github_link = models.URLField(validators=[URLValidator(), validate_github_url])
    tags = models.CharField(max_length=100, blank=True, 
                          help_text="Enter tags separated by commas")
    author = models.ForeignKey(User, on_delete=models.CASCADE)
    claps = models.IntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['-created_at']
        
    def __str__(self):
        return self.title
        
    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = slugify(self.title)
        super().save(*args, **kwargs)
    
    @property
    def tag_list(self):
        return [tag.strip() for tag in self.tags.split(',') if tag.strip()]
    
    @property
    def comment_count(self):
        return self.comments.count()
        
    def user_has_clapped(self, user):
        return self.claps_set.filter(user=user).exists()

class Comment(models.Model):
    project = models.ForeignKey(Project, related_name='comments', 
                              on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    parent = models.ForeignKey('self', null=True, blank=True, 
                             related_name='replies', 
                             on_delete=models.CASCADE)
    content = models.TextField()
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        ordering = ['created_at']
    
    def __str__(self):
        return f'Comment by {self.user.username} on {self.project.title}'

class Clap(models.Model):
    project = models.ForeignKey(Project, related_name='claps_set', 
                              on_delete=models.CASCADE)
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    clapped_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ('project', 'user')
    
    def __str__(self):
        return f'{self.user.username} clapped for {self.project.title}'

class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    bio = models.TextField(max_length=500, blank=True)
    location = models.CharField(max_length=100, blank=True)
    website = models.URLField(blank=True)
    github_username = models.CharField(max_length=100, blank=True)
    linkedin_url = models.URLField(blank=True)
    avatar = models.ImageField(upload_to='avatars/', blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.user.username}'s profile"
    
    @property
    def project_count(self):
        return self.user.project_set.count()
    
    @property
    def total_claps_received(self):
        return sum(project.claps for project in self.user.project_set.all())
    
    @property
    def top_tags(self):
        tags = {}
        for project in self.user.project_set.all():
            for tag in project.tag_list:
                tags[tag] = tags.get(tag, 0) + 1
        return sorted(tags.items(), key=lambda x: x[1], reverse=True)[:5]
    
    def follow(self, user_to_follow):
        """Follow another user"""
        if user_to_follow != self.user:
            Notification.create_notification(
                recipient=user_to_follow,
                sender=self.user,
                notification_type='follow'
            )
            # Implement follow logic here (e.g., using a many-to-many relationship)

    def unfollow(self, user_to_unfollow):
        """Unfollow another user"""
        # Implement unfollow logic here

class Rating(models.Model):
    RATING_CHOICES = (
        (1, '1 - Poor'),
        (2, '2 - Fair'),
        (3, '3 - Good'),
        (4, '4 - Very Good'),
        (5, '5 - Excellent')
    )
    
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='ratings')
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    score = models.IntegerField(choices=RATING_CHOICES)
    review = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    class Meta:
        unique_together = ('project', 'user')
        
    def __str__(self):
        return f"{self.user.username}'s {self.score}-star rating on {self.project.title}"

class Bookmark(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='bookmarks')
    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='bookmarks')
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        unique_together = ('user', 'project')
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.user.username} bookmarked {self.project.title}"

class ProjectAnalytics(models.Model):
    project = models.OneToOneField(Project, on_delete=models.CASCADE, related_name='analytics')
    view_count = models.PositiveIntegerField(default=0)
    unique_visitors = models.PositiveIntegerField(default=0)
    github_clicks = models.PositiveIntegerField(default=0)
    avg_time_spent = models.DurationField(default=timedelta)
    last_updated = models.DateTimeField(auto_now=True)
    
    # Traffic sources
    direct_traffic = models.PositiveIntegerField(default=0)
    social_traffic = models.PositiveIntegerField(default=0)
    search_traffic = models.PositiveIntegerField(default=0)
    referral_traffic = models.PositiveIntegerField(default=0)
    
    # Device stats
    desktop_visits = models.PositiveIntegerField(default=0)
    mobile_visits = models.PositiveIntegerField(default=0)
    tablet_visits = models.PositiveIntegerField(default=0)
    
    # Browser stats
    chrome_visits = models.PositiveIntegerField(default=0)
    firefox_visits = models.PositiveIntegerField(default=0)
    safari_visits = models.PositiveIntegerField(default=0)
    edge_visits = models.PositiveIntegerField(default=0)
    other_browsers = models.PositiveIntegerField(default=0)
    
    # Weekly and monthly stats
    unique_visitors_weekly = models.PositiveIntegerField(default=0)
    unique_visitors_monthly = models.PositiveIntegerField(default=0)
    github_clicks_weekly = models.PositiveIntegerField(default=0)
    github_clicks_monthly = models.PositiveIntegerField(default=0)
    
    class Meta:
        verbose_name_plural = "Project analytics"
        
    def __str__(self):
        return f"Analytics for {self.project.title}"

    def update_views(self, user, session_key):
        from django.core.cache import cache
        
        # Update view count and unique visitors
        self.view_count += 1
        key = f"project_view_{self.project.id}_{session_key}"
        if not cache.get(key):
            self.unique_visitors += 1
            cache.set(key, True, timeout=86400)  # 24 hours
        self.save()


# Add this to projects/models.py

class Notification(models.Model):
    NOTIFICATION_TYPES = (
        ('clap', 'Clap'),
        ('comment', 'Comment'),
        ('reply', 'Reply'),
        ('mention', 'Mention'),
        ('follow', 'Follow'),
        ('rating', 'Rating'),
        ('bookmark', 'Bookmark')
    )
    
    recipient = models.ForeignKey(User, related_name='notifications', on_delete=models.CASCADE)
    sender = models.ForeignKey(User, related_name='sent_notifications', on_delete=models.CASCADE)
    project = models.ForeignKey(Project, on_delete=models.CASCADE, null=True, blank=True)
    notification_type = models.CharField(max_length=20, choices=NOTIFICATION_TYPES)
    message = models.TextField()
    is_read = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)
    
    class Meta:
        ordering = ['-created_at']
    
    def __str__(self):
        return f"{self.sender.username}'s {self.notification_type} notification for {self.recipient.username}"
    
    @classmethod
    def create_notification(cls, recipient, sender, notification_type, project=None, message=None):
        if not message:
            message = cls.get_notification_message(notification_type, sender, project)
        return cls.objects.create(
            recipient=recipient,
            sender=sender,
            project=project,
            notification_type=notification_type,
            message=message
        )
    
    @staticmethod
    def get_notification_message(notification_type, sender, project=None):
        username = sender.username
        if project:
            project_title = project.title
            if notification_type == 'clap':
                return f"{username} clapped for your project '{project_title}'"
            elif notification_type == 'comment':
                return f"{username} commented on your project '{project_title}'"
            elif notification_type == 'reply':
                return f"{username} replied to your comment on '{project_title}'"
            elif notification_type == 'mention':
                return f"{username} mentioned you in a comment on '{project_title}'"
            elif notification_type == 'rating':
                return f"{username} rated your project '{project_title}'"
            elif notification_type == 'bookmark':
                return f"{username} bookmarked your project '{project_title}'"
        elif notification_type == 'follow':
            return f"{username} started following you"
        return "You have a new notification"
        
    def mark_as_read(self):
        if not self.is_read:
            self.is_read = True
            self.save()

# Contents from: .\projects\templatetags\search_tags.py
# projects/templatetags/search_tags.py

from django import template
from django.utils.html import mark_safe
from django.utils.html import escape
import re

register = template.Library()

@register.filter(name='highlight')
def highlight_search_term(text, search_term):
    """Highlight search terms in text while preserving HTML safety"""
    if not search_term or not text:
        return text
    
    text = str(text)
    search_term = str(search_term)
    
    # Escape HTML in the text
    text = escape(text)
    
    # Create a pattern that matches whole words
    pattern = r'({})'.format(re.escape(search_term))
    
    # Replace matches with highlighted version
    highlighted = re.sub(
        pattern,
        r'<mark class="highlight">\1</mark>',
        text,
        flags=re.IGNORECASE
    )
    
    return mark_safe(highlighted)

@register.filter(name='querystring_without')
def querystring_without(query_dict, key):
    """Remove a key from querystring while preserving other parameters"""
    query_dict = query_dict.copy()
    query_dict.pop(key, None)
    return query_dict.urlencode()

@register.simple_tag
def url_with_querystring(request, **kwargs):
    """Build URL with updated querystring parameters"""
    query_dict = request.GET.copy()
    for key, value in kwargs.items():
        query_dict[key] = value
    return '?{}'.format(query_dict.urlencode())

# Contents from: .\projects\tests.py
from django.test import TestCase

# Create your tests here.


# Contents from: .\projects\urls.py
# projects/urls.py

from django.urls import path
from . import views

app_name = 'projects'  # Add namespace

urlpatterns = [
    path('', views.project_list, name='project_list'),
    path('project/<int:pk>/', views.project_detail, name='project_detail'),
    path('submit/', views.submit_project, name='submit_project'),
    path('notifications/', views.notifications, name='notifications'),
    path('profile/edit/', views.edit_profile, name='edit_profile'),
    path('profile/<str:username>/', views.user_profile, name='user_profile'),
    path('profile/<str:username>/projects/', views.user_projects, name='user_projects'),
    path('search/', views.search_projects, name='search_projects'),
    path('project/<int:pk>/rate/', views.rate_project, name='rate_project'),
    path('project/<int:pk>/bookmark/', views.bookmark_project, name='bookmark_project'),
    path('notifications/', views.notifications, name='notifications'),
    path('notifications/<int:notification_id>/mark-read/', 
         views.mark_notification_read, name='mark_notification_read'),
    path('profile/<str:username>/follow/', views.follow_user, name='follow_user'),
    path('profile/<str:username>/unfollow/', views.unfollow_user, name='unfollow_user'),
    path('project/<int:pk>/analytics/', views.project_analytics, name='project_analytics'),
]

# Contents from: .\projects\utils\emails.py
# projects/utils/emails.py

from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.utils.html import strip_tags
from django.conf import settings

def send_notification_email(notification):
    """Send email for a new notification"""
    subject = f'New notification from {settings.SITE_NAME}'
    context = {
        'notification': notification,
        'site_url': settings.SITE_URL,
        'unsubscribe_url': f"{settings.SITE_URL}/settings/notifications/"
    }
    
    html_message = render_to_string('emails/notification.html', context)
    plain_message = strip_tags(html_message)
    
    send_mail(
        subject,
        plain_message,
        settings.DEFAULT_FROM_EMAIL,
        [notification.recipient.email],
        html_message=html_message,
        fail_silently=True
    )

def send_welcome_email(user):
    """Send welcome email to new users"""
    subject = f'Welcome to {settings.SITE_NAME}'
    context = {
        'user': user,
        'site_url': settings.SITE_URL,
        'unsubscribe_url': f"{settings.SITE_URL}/settings/notifications/"
    }
    
    html_message = render_to_string('emails/welcome.html', context)
    plain_message = strip_tags(html_message)
    
    send_mail(
        subject,
        plain_message,
        settings.DEFAULT_FROM_EMAIL,
        [user.email],
        html_message=html_message,
        fail_silently=True
    )

def send_comment_notification(comment):
    """Send email notification for new comments"""
    subject = f'New comment on your project - {settings.SITE_NAME}'
    context = {
        'comment': comment,
        'project': comment.project,
        'site_url': settings.SITE_URL,
        'unsubscribe_url': f"{settings.SITE_URL}/settings/notifications/"
    }
    
    html_message = render_to_string('emails/project_comment.html', context)
    plain_message = strip_tags(html_message)
    
    send_mail(
        subject,
        plain_message,
        settings.DEFAULT_FROM_EMAIL,
        [comment.project.author.email],
        html_message=html_message,
        fail_silently=True
    )

def send_clap_notification(clap):
    """Send email notification for new claps"""
    subject = f'Someone appreciated your project - {settings.SITE_NAME}'
    context = {
        'clap': clap,
        'project': clap.project,
        'site_url': settings.SITE_URL,
        'unsubscribe_url': f"{settings.SITE_URL}/settings/notifications/"
    }
    
    html_message = render_to_string('emails/project_clap.html', context)
    plain_message = strip_tags(html_message)
    
    send_mail(
        subject,
        plain_message,
        settings.DEFAULT_FROM_EMAIL,
        [clap.project.author.email],
        html_message=html_message,
        fail_silently=True
    )

# Contents from: .\projects\views.py
# projects/views.py
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.contrib import messages
from django.http import JsonResponse
from django.db.models import Count, Q, Avg
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.conf import settings
from django.urls import reverse
from django.utils import timezone
from django.core.cache import cache
from .models import (
    Project, Comment, Clap, UserProfile, Rating, 
    Bookmark, ProjectAnalytics, Notification
)
from .forms import (
    ProjectForm, CommentForm, ProjectSearchForm, UserProfileForm,
    RatingForm, BookmarkForm, AdvancedSearchForm
)
from .filters.project_filters import ProjectFilter
from django.contrib.auth.forms import UserCreationForm
from django.urls import reverse_lazy
from django.views.generic.edit import CreateView

def get_client_info(request):
    """Get basic client information without user-agents package"""
    info = {
        'is_mobile': request.META.get('HTTP_USER_AGENT', '').lower().find('mobile') > -1,
        'browser': 'other',
        'ip': request.META.get('REMOTE_ADDR'),
        'referrer': request.META.get('HTTP_REFERER', ''),
    }
    
    user_agent = request.META.get('HTTP_USER_AGENT', '').lower()
    if 'chrome' in user_agent:
        info['browser'] = 'chrome'
    elif 'firefox' in user_agent:
        info['browser'] = 'firefox'
    elif 'safari' in user_agent:
        info['browser'] = 'safari'
    elif 'edge' in user_agent:
        info['browser'] = 'edge'
    
    return info

def update_analytics(request, project):
    """Update project analytics"""
    analytics, created = ProjectAnalytics.objects.get_or_create(project=project)
    client_info = get_client_info(request)
    
    # Update view count
    analytics.view_count += 1
    
    # Update device stats
    if client_info['is_mobile']:
        analytics.mobile_visits += 1
    else:
        analytics.desktop_visits += 1
    
    # Update browser stats
    if client_info['browser'] == 'chrome':
        analytics.chrome_visits += 1
    elif client_info['browser'] == 'firefox':
        analytics.firefox_visits += 1
    elif client_info['browser'] == 'safari':
        analytics.safari_visits += 1
    elif client_info['browser'] == 'edge':
        analytics.edge_visits += 1
    else:
        analytics.other_browsers += 1
    
    # Update traffic sources
    referrer = client_info['referrer']
    if not referrer:
        analytics.direct_traffic += 1
    elif 'google' in referrer or 'bing' in referrer:
        analytics.search_traffic += 1
    elif 'facebook' in referrer or 'twitter' in referrer or 'linkedin' in referrer:
        analytics.social_traffic += 1
    else:
        analytics.referral_traffic += 1
    
    # Update unique visitors
    visitor_key = f"visitor_{client_info['ip']}_{project.id}"
    if not cache.get(visitor_key):
        analytics.unique_visitors += 1
        cache.set(visitor_key, True, timeout=86400)  # 24 hours
        
        # Update weekly and monthly unique visitors
        now = timezone.now()
        week_ago = now - timedelta(days=7)
        month_ago = now - timedelta(days=30)
        
        if not cache.get(f"{visitor_key}_weekly"):
            analytics.unique_visitors_weekly += 1
            cache.set(f"{visitor_key}_weekly", True, timeout=604800)  # 7 days
            
        if not cache.get(f"{visitor_key}_monthly"):
            analytics.unique_visitors_monthly += 1
            cache.set(f"{visitor_key}_monthly", True, timeout=2592000)  # 30 days
    
    analytics.save()

def project_list(request):
    """List and search projects"""
    search_form = ProjectSearchForm(request.GET)
    projects = Project.objects.all()
    
    if search_form.is_valid():
        query = search_form.cleaned_data.get('query')
        tags = search_form.cleaned_data.get('tags')
        sort = search_form.cleaned_data.get('sort')
        
        if query:
            projects = projects.filter(
                Q(title__icontains=query) |
                Q(description__icontains=query) |
                Q(author__username__icontains=query) |
                Q(tags__icontains=query)
            )
        
        if tags:
            for tag in tags:
                projects = projects.filter(tags__icontains=tag)
        
        if sort:
            projects = projects.order_by(sort)
        else:
            projects = projects.order_by('-created_at')
    else:
        projects = projects.order_by('-created_at')
    
    # Pagination
    paginator = Paginator(projects, 12)
    page = request.GET.get('page', 1)
    
    try:
        page_obj = paginator.page(page)
    except PageNotAnInteger:
        page_obj = paginator.page(1)
    except EmptyPage:
        page_obj = paginator.page(paginator.num_pages)
    
    # Get popular tags
    popular_tags = (Project.objects
        .values_list('tags', flat=True)
        .exclude(tags='')
        .annotate(count=Count('id'))
        .order_by('-count')[:10])
    
    context = {
        'page_obj': page_obj,
        'popular_tags': popular_tags,
        'search_form': search_form,
    }
    return render(request, 'projects/project_list.html', context)

@login_required
def submit_project(request):
    """Submit a new project"""
    if request.method == 'POST':
        form = ProjectForm(request.POST)
        if form.is_valid():
            project = form.save(commit=False)
            project.author = request.user
            project.save()
            messages.success(request, 'Project submitted successfully!')
            return redirect('project_detail', pk=project.pk)
    else:
        form = ProjectForm()
    
    return render(request, 'projects/submit_project.html', {
        'form': form,
    })

def project_detail(request, pk):
    """Display project details"""
    project = get_object_or_404(Project, pk=pk)
    update_analytics(request, project)
    
    # Get parent comments only for threaded display
    comments = project.comments.filter(parent=None).order_by('created_at')
    
    # Check if user has interacted with the project
    context = {
        'project': project,
        'comments': comments,
        'form': CommentForm(),
        'rating_form': RatingForm(),
        'bookmark_form': BookmarkForm(),
    }
    
    if request.user.is_authenticated:
        context.update({
            'user_has_clapped': project.user_has_clapped(request.user),
            'user_rating': Rating.objects.filter(project=project, user=request.user).first(),
            'user_bookmark': Bookmark.objects.filter(project=project, user=request.user).first(),
        })
    
    return render(request, 'projects/project_detail.html', context)




@login_required
def rate_project(request, pk):
    if request.method == 'POST':
        project = get_object_or_404(Project, pk=pk)
        form = RatingForm(request.POST)
        
        if form.is_valid():
            rating, created = Rating.objects.update_or_create(
                project=project,
                user=request.user,
                defaults={
                    'score': form.cleaned_data['score'],
                    'review': form.cleaned_data['review']
                }
            )
            
            # Update project rating cache
            avg_rating = project.ratings.aggregate(Avg('score'))['score__avg']
            cache.set(f'project_rating_{project.id}', avg_rating, timeout=3600)
            
            messages.success(request, 'Thank you for your rating!')
            return JsonResponse({
                'status': 'success',
                'rating': avg_rating,
                'total_ratings': project.ratings.count()
            })
    
    return JsonResponse({'status': 'error'}, status=400)

@login_required
def toggle_bookmark(request, pk):
    project = get_object_or_404(Project, pk=pk)
    bookmark, created = Bookmark.objects.get_or_create(
        project=project,
        user=request.user,
        defaults={'notes': ''}
    )
    
    if not created:
        bookmark.delete()
        return JsonResponse({'status': 'removed'})
    
    return JsonResponse({'status': 'added'})

@login_required
def update_bookmark_notes(request, pk):
    bookmark = get_object_or_404(Bookmark, project_id=pk, user=request.user)
    
    if request.method == 'POST':
        form = BookmarkForm(request.POST, instance=bookmark)
        if form.is_valid():
            form.save()
            return JsonResponse({'status': 'success'})
    
    return JsonResponse({'status': 'error'}, status=400)

@login_required
def bookmarks(request):
    bookmarks = Bookmark.objects.filter(user=request.user).select_related('project')
    return render(request, 'projects/bookmarks.html', {'bookmarks': bookmarks})

# projects/views.py

import json
from datetime import timedelta, datetime
from django.db.models.functions import TruncDate
from django.db.models import Count
from user_agents import parse

def project_analytics(request, pk):
    if not request.user.is_staff and not request.user == project.author:
        messages.error(request, 'You do not have permission to view analytics.')
        return redirect('project_detail', pk=pk)
    
    project = get_object_or_404(Project, pk=pk)
    analytics = project.analytics
    
    # Time ranges
    today = timezone.now()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)
    
    # Daily views data
    daily_views = (ProjectAnalytics.objects
        .filter(project=project, timestamp__gte=month_ago)
        .annotate(date=TruncDate('timestamp'))
        .values('date')
        .annotate(count=Count('id'))
        .order_by('date'))
    
    # Prepare chart data
    dates = [(today - timedelta(days=x)).strftime('%Y-%m-%d') for x in range(30, -1, -1)]
    views_dict = {item['date'].strftime('%Y-%m-%d'): item['count'] for item in daily_views}
    
    # Create datasets
    monthly_views = [views_dict.get(date, 0) for date in dates]
    weekly_views = monthly_views[-7:]
    weekly_labels = dates[-7:]
    monthly_labels = dates
    
    # Traffic sources data (example data - replace with actual tracking)
    traffic_sources = [
        analytics.direct_traffic,
        analytics.social_traffic,
        analytics.search_traffic,
        analytics.referral_traffic
    ]
    
    # Device and browser data
    user_agent = parse(request.META.get('HTTP_USER_AGENT', ''))
    
    device_data = [
        analytics.desktop_visits,
        analytics.mobile_visits,
        analytics.tablet_visits
    ]
    
    browser_data = [
        analytics.chrome_visits,
        analytics.firefox_visits,
        analytics.safari_visits,
        analytics.edge_visits,
        analytics.other_browsers
    ]
    
    # Location data (example - replace with actual tracking)
    locations = ['United States', 'United Kingdom', 'Canada', 'Germany', 'Other']
    location_data = [35, 25, 15, 10, 15]  # Example percentages
    
    context = {
        'project': project,
        'analytics': analytics,
        'weekly_stats': {
            'views': sum(weekly_views),
            'unique_visitors': analytics.unique_visitors_weekly,
            'github_clicks': analytics.github_clicks_weekly,
            'comments': project.comments.filter(created_at__gte=week_ago).count(),
            'claps': project.claps_set.filter(created_at__gte=week_ago).count(),
            'ratings': project.ratings.filter(created_at__gte=week_ago).count(),
            'bookmarks': project.bookmarks.filter(created_at__gte=week_ago).count(),
        },
        'monthly_stats': {
            'views': sum(monthly_views),
            'unique_visitors': analytics.unique_visitors_monthly,
            'github_clicks': analytics.github_clicks_monthly,
            'comments': project.comments.filter(created_at__gte=month_ago).count(),
            'claps': project.claps_set.filter(created_at__gte=month_ago).count(),
            'ratings': project.ratings.filter(created_at__gte=month_ago).count(),
            'bookmarks': project.bookmarks.filter(created_at__gte=month_ago).count(),
        },
        'weekly_labels': json.dumps(weekly_labels),
        'monthly_labels': json.dumps(monthly_labels),
        'weekly_views': json.dumps(weekly_views),
        'monthly_views': json.dumps(monthly_views),
        'traffic_sources': json.dumps(traffic_sources),
        'device_data': json.dumps(device_data),
        'browser_data': json.dumps(browser_data),
        'locations': json.dumps(locations),
        'location_data': json.dumps(location_data),
    }
    
    return render(request, 'projects/analytics.html', context)

def get_popular_tags():
    """Helper function to get popular tags"""
    return (Project.objects
            .values('tags')
            .annotate(count=Count('id'))
            .order_by('-count')
            .exclude(tags='')[:10])

# projects/views.py (update the project_list view)






@login_required
def clap_project(request):
    if request.method == 'POST':
        project_id = request.POST.get('project_id')
        project = get_object_or_404(Project, id=project_id)
        
        clap, created = Clap.objects.get_or_create(
            user=request.user,
            project=project
        )
        
        if created:
            project.claps += 1
            project.save()
            return JsonResponse({
                'status': 'success',
                'claps': project.claps
            })
        else:
            return JsonResponse({
                'status': 'error',
                'message': 'Already clapped'
            })
    
    return JsonResponse({
        'status': 'error',
        'message': 'Invalid request'
    })


# projects/views.py (add to existing file)

@login_required
def edit_profile(request):
    try:
        profile = request.user.profile
    except UserProfile.DoesNotExist:
        profile = UserProfile(user=request.user)
    
    if request.method == 'POST':
        form = UserProfileForm(request.POST, request.FILES, instance=profile)
        if form.is_valid():
            profile = form.save()
            messages.success(request, 'Profile updated successfully!')
            return redirect('user_profile', username=request.user.username)
    else:
        form = UserProfileForm(instance=profile)
    
    return render(request, 'projects/edit_profile.html', {'form': form})

@login_required
def user_profile(request, username):
    profile_user = get_object_or_404(User, username=username)
    projects = Project.objects.filter(author=profile_user).order_by('-created_at')
    is_following = request.user.is_authenticated and request.user.following.filter(id=profile_user.id).exists()
    
    context = {
        'profile_user': profile_user,
        'projects': projects,
        'is_following': is_following,
    }
    return render(request, 'projects/user_profile.html', context)

def user_projects(request, username):
    user = get_object_or_404(User, username=username)
    projects = user.project_set.all().order_by('-created_at')
    
    # Filter by tag if provided
    tag = request.GET.get('tag')
    if tag:
        projects = projects.filter(tags__icontains=tag)
    
    paginator = Paginator(projects, 10)
    page = request.GET.get('page')
    projects_page = paginator.get_page(page)
    
    context = {
        'user_profile': user,
        'projects': projects_page,
        'selected_tag': tag,
    }
    return render(request, 'projects/user_projects.html', context)


# projects/views.py (add to existing file)

@login_required
def notifications(request):
    notifications = request.user.notifications.all()
    unread_count = notifications.filter(is_read=False).count()
    
    # Mark all as read
    if request.GET.get('mark_read'):
        notifications.update(is_read=True)
        return redirect('notifications')
    
    context = {
        'notifications': notifications,
        'unread_count': unread_count
    }
    return render(request, 'projects/notifications.html', context)

@login_required
def mark_notification_read(request, notification_id):
    notification = get_object_or_404(Notification, id=notification_id, recipient=request.user)
    notification.is_read = True
    notification.save()
    
    # Return URL based on notification type
    if notification.project:
        return redirect('project_detail', pk=notification.project.pk)
    elif notification.notification_type == 'follow':
        return redirect('user_profile', username=notification.sender.username)
    return redirect('notifications')

@login_required
def follow_user(request, username):
    user_to_follow = get_object_or_404(User, username=username)
    request.user.profile.follow(user_to_follow)
    return JsonResponse({'status': 'success'})

@login_required
def unfollow_user(request, username):
    user_to_unfollow = get_object_or_404(User, username=username)
    request.user.profile.unfollow(user_to_unfollow)
    return JsonResponse({'status': 'success'})

def search_projects(request):
    """Advanced search view"""
    form = AdvancedSearchForm(request.GET)
    projects = Project.objects.all()
    
    if form.is_valid():
        # Apply filters using ProjectFilter
        project_filter = ProjectFilter(request.GET, queryset=projects)
        projects = project_filter.qs
        
        # Apply sorting
        sort_by = form.cleaned_data.get('sort_by')
        if sort_by:
            if sort_by == '-rating_avg':
                # Annotate with average rating
                projects = projects.annotate(
                    rating_avg=Avg('ratings__score')
                ).order_by('-rating_avg')
            elif sort_by == '-comment_count':
                # Annotate with comment count
                projects = projects.annotate(
                    comment_count=Count('comments')
                ).order_by('-comment_count')
            else:
                projects = projects.order_by(sort_by)
    
    # Annotate with additional metrics for display
    projects = projects.annotate(
        comment_count=Count('comments'),
        rating_avg=Avg('ratings__score')
    )
    
    # Pagination
    paginator = Paginator(projects, settings.MAX_PROJECTS_PER_PAGE)
    page = request.GET.get('page')
    try:
        projects = paginator.page(page)
    except PageNotAnInteger:
        projects = paginator.page(1)
    except EmptyPage:
        projects = paginator.page(paginator.num_pages)
    
    context = {
        'form': form,
        'projects': projects,
        'popular_tags': get_popular_tags(),
        'total_results': paginator.count,
    }
    
    if request.headers.get('HX-Request'):
        # Return partial template for HTMX requests
        return render(request, 'projects/includes/project_list_results.html', context)
    
    return render(request, 'projects/search.html', context)

@login_required
def bookmark_project(request, pk):
    """Add or remove a project bookmark"""
    project = get_object_or_404(Project, pk=pk)
    bookmark, created = Bookmark.objects.get_or_create(
        user=request.user,
        project=project
    )
    
    if not created:
        # If bookmark already existed, remove it
        bookmark.delete()
        messages.success(request, 'Bookmark removed.')
        return JsonResponse({
            'status': 'success',
            'action': 'removed',
            'message': 'Project removed from bookmarks'
        })
    
    # Create notification for project author
    if project.author != request.user:
        Notification.create_notification(
            recipient=project.author,
            sender=request.user,
            notification_type='bookmark',
            project=project
        )
    
    messages.success(request, 'Project bookmarked successfully.')
    return JsonResponse({
        'status': 'success',
        'action': 'added',
        'message': 'Project added to bookmarks'
    })

class RegisterView(CreateView):
    form_class = UserCreationForm
    success_url = reverse_lazy('login')
    template_name = 'registration/register.html'